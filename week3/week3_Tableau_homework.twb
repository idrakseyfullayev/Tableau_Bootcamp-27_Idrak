<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20241.24.0425.1340                               -->
<workbook original-version='18.1' source-build='2024.1.2 (20241.24.0425.1340)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
      </column>
    </datasource>
    <datasource caption='Orders (sample-superstore-subset-excel (1))' inline='true' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='sample-superstore-subset-excel (1)' name='excel-direct.0g7t4xt0ecay0010puxy11932rkw'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/dell/Desktop/Tableau/week3/sample-superstore-subset-excel (1).xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0g7t4xt0ecay0010puxy11932rkw' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:X9427:no:A1:X9427:0' header='yes' outcome='2'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order Priority' ordinal='1' />
            <column datatype='real' name='Discount' ordinal='2' />
            <column datatype='real' name='Unit Price' ordinal='3' />
            <column datatype='real' name='Shipping Cost' ordinal='4' />
            <column datatype='integer' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Ship Mode' ordinal='7' />
            <column datatype='string' name='Customer Segment' ordinal='8' />
            <column datatype='string' name='Product Category' ordinal='9' />
            <column datatype='string' name='Product Sub-Category' ordinal='10' />
            <column datatype='string' name='Product Container' ordinal='11' />
            <column datatype='string' name='Product Name' ordinal='12' />
            <column datatype='real' name='Product Base Margin' ordinal='13' />
            <column datatype='string' name='Region' ordinal='14' />
            <column datatype='string' name='State or Province' ordinal='15' />
            <column datatype='string' name='City' ordinal='16' />
            <column datatype='integer' name='Postal Code' ordinal='17' />
            <column datatype='date' name='Order Date' ordinal='18' />
            <column datatype='date' name='Ship Date' ordinal='19' />
            <column datatype='real' name='Profit' ordinal='20' />
            <column datatype='integer' name='Quantity ordered new' ordinal='21' />
            <column datatype='real' name='Sales' ordinal='22' />
            <column datatype='integer' name='Order ID' ordinal='23' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0g7t4xt0ecay0010puxy11932rkw' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:X9427:no:A1:X9427:0' header='yes' outcome='2'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order Priority' ordinal='1' />
            <column datatype='real' name='Discount' ordinal='2' />
            <column datatype='real' name='Unit Price' ordinal='3' />
            <column datatype='real' name='Shipping Cost' ordinal='4' />
            <column datatype='integer' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Ship Mode' ordinal='7' />
            <column datatype='string' name='Customer Segment' ordinal='8' />
            <column datatype='string' name='Product Category' ordinal='9' />
            <column datatype='string' name='Product Sub-Category' ordinal='10' />
            <column datatype='string' name='Product Container' ordinal='11' />
            <column datatype='string' name='Product Name' ordinal='12' />
            <column datatype='real' name='Product Base Margin' ordinal='13' />
            <column datatype='string' name='Region' ordinal='14' />
            <column datatype='string' name='State or Province' ordinal='15' />
            <column datatype='string' name='City' ordinal='16' />
            <column datatype='integer' name='Postal Code' ordinal='17' />
            <column datatype='date' name='Order Date' ordinal='18' />
            <column datatype='date' name='Ship Date' ordinal='19' />
            <column datatype='real' name='Profit' ordinal='20' />
            <column datatype='integer' name='Quantity ordered new' ordinal='21' />
            <column datatype='real' name='Sales' ordinal='22' />
            <column datatype='integer' name='Order ID' ordinal='23' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Orders]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:X9427:no:A1:X9427:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Priority</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order Priority]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Priority</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unit Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unit Price]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Unit Price</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shipping Cost</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shipping Cost]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Shipping Cost</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Segment]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Segment</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Category</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Sub-Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Sub-Category</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Container</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Container]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Container</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Base Margin</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Product Base Margin]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Base Margin</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State or Province</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State or Province]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>State or Province</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>18</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>19</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity ordered new</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity ordered new]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Quantity ordered new</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='integer' name='[Customer ID]' role='dimension' type='ordinal' />
      <column datatype='integer' name='[Order ID]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
      <column datatype='string' name='[Product Sub-Category (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Product Sub-Category]' new-bin='true'>
          <bin default-name='false' value='&quot;Others&quot;'>
            <value>&quot;Envelopes&quot;</value>
            <value>&quot;Labels&quot;</value>
            <value>&quot;Pens &amp; Art Supplies&quot;</value>
            <value>&quot;Rubber Bands&quot;</value>
            <value>&quot;Scissors, Rulers and Trimmers&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Product Sub-Category]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
      <column datatype='string' name='[State or Province]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='Orders' datatype='table' name='[__tableau_internal_object_id__].[Orders_8DC1B46268C04C95B7F61E646A008039]' role='measure' type='quantitative' />
      <column-instance column='[Product Name Set]' derivation='InOut' name='[io:Product Name Set:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
      <group caption='Product Name Set' name='[Product Name Set]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Sales])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Product Name]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_GB' class='hyper' dbname='C:/Users/dell/AppData/Local/Temp/TableauTemp/#TableauTemp_1mkdywb1r5jcmt1e56iad1mztyy9.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='06/07/2024 05:38:33 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation name='Extract' table='[Extract].[Extract]' type='table' />
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Row ID</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Row ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Row ID</remote-alias>
              <ordinal>0</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>9426</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order Priority</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Order Priority]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order Priority</remote-alias>
              <ordinal>1</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>5</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Discount</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Discount]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Discount</remote-alias>
              <ordinal>2</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Unit Price</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Unit Price]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Unit Price</remote-alias>
              <ordinal>3</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>941</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Shipping Cost</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Shipping Cost]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Shipping Cost</remote-alias>
              <ordinal>4</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>793</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer ID</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Customer ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer ID</remote-alias>
              <ordinal>5</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>2378</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer Name</remote-alias>
              <ordinal>6</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2378</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Mode</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Ship Mode]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Mode</remote-alias>
              <ordinal>7</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Customer Segment</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Customer Segment]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Customer Segment</remote-alias>
              <ordinal>8</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Category</remote-alias>
              <ordinal>9</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Sub-Category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Sub-Category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Sub-Category</remote-alias>
              <ordinal>10</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>17</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Container</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Container]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Container</remote-alias>
              <ordinal>11</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Name</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Product Name]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Name</remote-alias>
              <ordinal>12</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1509</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Product Base Margin</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Product Base Margin]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Product Base Margin</remote-alias>
              <ordinal>13</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>52</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Region</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Region]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Region</remote-alias>
              <ordinal>14</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>4</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>State or Province</remote-name>
              <remote-type>129</remote-type>
              <local-name>[State or Province]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>State or Province</remote-alias>
              <ordinal>15</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>53</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>City</remote-name>
              <remote-type>129</remote-type>
              <local-name>[City]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>City</remote-alias>
              <ordinal>16</ordinal>
              <family>Orders</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1671</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RUS_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Postal Code</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Postal Code]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Postal Code</remote-alias>
              <ordinal>17</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1956</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Order Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order Date</remote-alias>
              <ordinal>18</ordinal>
              <family>Orders</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1708</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Ship Date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Ship Date]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Ship Date</remote-alias>
              <ordinal>19</ordinal>
              <family>Orders</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1716</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Profit</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Profit]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Profit</remote-alias>
              <ordinal>20</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>6447</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Quantity ordered new</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Quantity ordered new]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Quantity ordered new</remote-alias>
              <ordinal>21</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>110</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sales</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sales]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sales</remote-alias>
              <ordinal>22</ordinal>
              <family>Orders</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>5734</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Order ID</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Order ID]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Order ID</remote-alias>
              <ordinal>23</ordinal>
              <family>Orders</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>4015</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Orders_8DC1B46268C04C95B7F61E646A008039]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Product Sub-Category (group)]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Office Machines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Others&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chairs &amp; Chairmats&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Telephones and Communication&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Computer Peripherals&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Copiers and Fax&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Storage &amp; Organization&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Office Furnishings&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Binders and Binder Accessories&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Akron&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Anderson&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Atascadero&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Baton Rouge&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Benton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Blacksburg&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brandon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Buffalo&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Carbondale&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Central Falls&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chula Vista&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Colchester&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Coralville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cumberland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Deerfield Beach&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dracut&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;East Hartford&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Edison&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Englewood&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fairmont&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fort Bragg&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Fremont&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Georgetown&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Grafton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Greenwood&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Harlingen&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hialeah&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Holladay&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hurst&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Janesville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Keller&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Klamath Falls&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lake Oswego&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Leavenworth&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lino Lakes&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Loveland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mankato&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Massillon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mesa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Miramar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Moscow&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Naperville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Rochelle&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;North Bergen&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Norton&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Odessa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Oswego&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Palm Coast&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Passaic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Phenix City&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Pocatello&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Prattville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Red Wing&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Riverside&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rosenberg&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Louis&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;San Marcos&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Savannah&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Shakopee&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Smyrna&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sparks&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Streamwood&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tampa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Titusville&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tuscaloosa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vestavia Hills&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Watauga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;West Allis&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Westbrook&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Willimantic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Woodstock&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aberdeen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Altoona&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Arlington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bakersfield&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belle Glade&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beverly Hills&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bountiful&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brooklyn&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caldwell&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Casselberry&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cherry Hill&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clifton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Concord&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Covington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Davis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Des Plaines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Durham&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Easton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Elkhart&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Evanston&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fitchburg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Fountain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Garden City&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Glendale Heights&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greeley&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hamden&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Helena&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hinesville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hot Springs&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Irving&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kannapolis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;King of Prussia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lafayette&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Laurel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lexington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Longmont&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Madison Heights&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Marshalltown&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Menlo Park&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Milton&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Montgomery&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Muscatine&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Noblesville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;North Port&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oakland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oregon City&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ozark&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Parker&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Peoria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Plano&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Port Saint Lucie&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Radnor&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rexburg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rockville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Rye&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;San Carlos&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Santa Maria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seattle&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sierra Vista&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;South Windsor&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Steubenville&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Superior&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;The Colony&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Troutdale&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Utica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Walla Walla&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Waynesboro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;West Milford&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;White Plains&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Winthrop&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Youngstown&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Addison&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ames&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Asheboro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Barrington&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belmont&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Biloxi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Boynton Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cambridge&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cedar Hill&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cheyenne&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Coachella&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Coos Bay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Crofton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dearborn Heights&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dodge City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eagle Pass&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eden Prairie&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Elmwood Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fairborn&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Florissant&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Franklin&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Garland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Goldsboro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greensboro&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hanover&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hendersonville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hoboken&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hudson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ithaca&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kearns&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kingsville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lake Elsinore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lawton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lincoln Park&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Los Angeles&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mandan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Marysville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Meridian&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Minnetonka&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moreno Valley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mustang&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;New Iberia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norristown&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Northampton&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ocean City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ormond Beach&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palatine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Parma&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Petaluma&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pleasantville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Post Falls&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Randallstown&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Richland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romeoville&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Charles&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;San Gabriel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saratoga&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Seminole&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Skokie&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Southfield&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Stoneham&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tacoma&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Thousand Oaks&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tucker&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Valparaiso&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Warner Robins&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wellesley&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;West Seneca&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wichita Falls&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Woodbury&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Albuquerque&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Annandale&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Attleboro&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Baytown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Berkeley&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Boardman&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bridgeport&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burien&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Carol Stream&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chandler&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Clarksburg&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Collinsville&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Corsicana&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dalton&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Deltona&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dubuque&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;East Los Angeles&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;El Centro&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Escondido&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Farmers Branch&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fort Lee&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Frisco&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gilroy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grand Prairie&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grove City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hartford&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Highland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Homestead&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Independence&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Johnson City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kennesaw&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;La Grange&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lakewood&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lehi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Livonia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lufkin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maple Shade&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mcminnville&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Michigan City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Missouri City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mount Vernon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Naugatuck&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Newburyport&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;North Las Vegas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Novi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Old Bridge&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Oviedo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Palo Alto&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pearl&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Pico Rivera&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ponca City&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Providence&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Redmond&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rochester&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Round Rock&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Petersburg&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sandwich&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Schenectady&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Shelby&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Boston&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spring Hill&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sugar Land&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Teaneck&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tonawanda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tysons Corner&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vineland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Watertown&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;West Des Moines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Westford&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Wilmette&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Wyckoff&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Alamogordo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Andover&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Athens&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Battle Creek&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bentonville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Blaine&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Branford&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Buffalo Grove&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Carlsbad&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Central Islip&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cincinnati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;College Park&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Coram&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cuyahoga Falls&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Deland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Draper&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;East Haven&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Edmond&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Enid&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fall River&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fort Collins&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fresno&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germantown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Grand Forks&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greer&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Harrisburg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hickory&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Hutchinson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jefferson City&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kendall&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Knoxville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lake Worth&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Leawood&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Little Rock&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lowell&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mansfield&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauldin&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mesquite&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mishawaka&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mount Lebanon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nashua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New Smyrna Beach&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;North Charleston&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norwalk&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ogden&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ottumwa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Palm Harbor&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Paterson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philadelphia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Poinciana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prescott&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Redding&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Riverview&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Roseville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Louis Park&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;San Mateo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sayreville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sharon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Somerset&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spartanburg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Strongsville&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Taunton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tiverton&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Twentynine Palms&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vicksburg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterbury&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;West Babylon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Westerly&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Willingboro&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Woonsocket&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Adrian&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Amesbury&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Asheville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bartlesville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Belvidere&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Binghamton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bozeman&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brunswick&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Camden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cedar Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chicago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Coconut Creek&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Coppell&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Crown Point&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Decatur&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Douglasville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;East Brunswick&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Edgewood&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Elyria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Fairfax&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Flower Mound&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Franklin Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Garner&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Goleta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Greensburg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hanover Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hermitage&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hoffman Estates&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Huntington&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jackson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kearny&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kirkland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lake Forest&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Layton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Linden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Los Banos&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Manhattan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maryville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Merrillville&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Minnetonka Mills&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Morgan Hill&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myrtle Beach&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New London&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;North Andover&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northbrook&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oceanside&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oro Valley&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Palisades Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Parsippany&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Petersburg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pleasure Ridge Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Potomac&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rapid City&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Roosevelt&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Clair Shores&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;San Jose&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saugus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Severna Park&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slidell&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Southgate&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Stoughton&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Talladega&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tigard&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tucson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Van Buren&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Warren&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wenatchee&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;West Springfield&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Wilbraham&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Woodland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Altamonte Springs&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Apple Valley&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Avenel&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belchertown&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bettendorf&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bothell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Brookings&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Butte&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Casas Adobes&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chattanooga&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cleveland Heights&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Commack&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Country Club Hills&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Davenport&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Derry&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dunwoody&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;East Saint Louis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Elk Grove Village&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eureka&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ferguson&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fort Worth&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Galesburg&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Glen Ellyn&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grapevine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hagerstown&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hazelwood&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hillside&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hopkinton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iowa City&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kalispell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Killeen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lacey&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Las Cruces&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lewiston&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Long Branch&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Macon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Marlborough&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Melrose Park&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Milford&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montclair&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Murray&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;New Bern&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Niagara Falls&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;North Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oak Ridge&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Opelika&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oxford&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paris&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pennsauken&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Plainfield&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Port Huron&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Quincy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Reston&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rockland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rutherford&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Antonio&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Santa Cruz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Searcy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shreveport&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Portland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Statesboro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sunnyvale&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Texarkana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tracy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Urbana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Waldorf&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Waxahachie&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;West Memphis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Wheaton&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Winter Park&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Yonkers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abilene&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Altus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Arlington Heights&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Baldwin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belleville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Biddeford&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bourne&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brooklyn Center&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Calexico&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Castle Rock&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chesapeake&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Conroe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cranford&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dayton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Detroit&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Duxbury&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eastpointe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ellicott City&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Everett&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Flagstaff&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Foxborough&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gardner&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Glenview&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Green Bay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hamilton&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hemet&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hingham&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Houma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Irvington&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kansas City&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kingman&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Laguna Hills&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Laurinburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liberal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Longview&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Magna&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Marshfield&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Menomonee Falls&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Milwaukee&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Moore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Muskego&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Castle&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Norfolk&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;North Ridgeville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Oakland Park&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Orem&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pacifica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Parkersburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Pepperell&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Plant City&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Portage&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rahway&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Reynoldsburg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Rocky Mount&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saco&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;San Clemente&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Santa Monica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Secaucus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Silver Spring&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Southaven&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Stevens Point&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Surprise&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;The Woodlands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Troy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vacaville&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Wallingford&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Weatherford&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;West Orange&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Whitehall&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Woburn&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Yuba City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Allentown&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Apex&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Austin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Beckley&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bethlehem&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bossier City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Broken Arrow&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Burnsville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Carteret&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Charlotte&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cleburne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Columbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cottage Lake&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Danville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Depew&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dundalk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;East Point&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Elgin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eugene&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fayetteville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fort Thomas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gainesville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Glen Burnie&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Granite City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hacienda Heights&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hawthorne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hilliard&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hopkins&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Inkster&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jupiter&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kentwood&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;La Vergne&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Laramie&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Leominster&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Londonderry&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lynn&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Marietta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mehlville&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Midvale&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Monroe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Munster&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Bedford&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Newport News&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;North Olmsted&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oak Lawn&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Omaha&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Owings Mills&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paragould&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pendleton&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pittsburg&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Port Charlotte&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pullman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Reno&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rock Springs&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Royal Palm Beach&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Salt Lake City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Santa Barbara&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Scottsdale&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Shirley&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Orange&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Stamford&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sun City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Terrytown&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Torrington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Upper Arlington&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Wake Forest&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Wausau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;West Lafayette&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Weymouth&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Winter Garden&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yakima&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Agawam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anacortes&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ashland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bartlett&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bend&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Birmingham&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bradenton&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bryan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Camp Springs&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cedar Rapids&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chico&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Coeur D Alene&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Coral Gables&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Crystal Lake&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dedham&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dover&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;East Chicago&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Edina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Emporia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fairfield&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fords&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Franklin Square&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gary&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Goodyear&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greenville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hanson&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Herndon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Holbrook&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Huntington Beach&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jacksonville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Keene&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kirkwood&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lake In The Hills&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;League City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lindenhurst&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Los Gatos&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Manhattan Beach&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mason&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Merrimack&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Minot&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Morgantown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nampa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Milford&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;North Arlington&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Northglenn&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ocoee&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Oshkosh&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Palm Bay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pasadena&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pflugerville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Plum&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pottstown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Raytown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rose Hill&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Cloud&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;San Juan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sault Sainte Marie&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Seymour&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Smithfield&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spanaway&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Stow&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tallahassee&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tinley Park&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tulsa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vancouver&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Warwick&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wentzville&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;West Valley City&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wilkes Barre&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Woodmere&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Alexandria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Annapolis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Auburn&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Beaumont&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bessemer&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Boca Raton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bridgeton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burke&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Carpentersville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Channelview&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Clarksville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Colonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Corvallis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Daly City&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dennis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Duluth&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;East Massapequa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;El Dorado Hills&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Essex&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Farmington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fort Myers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Fruit Cove&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Gladstone&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Grand Rapids&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guilford&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hastings&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Highland Park&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Homewood&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Indian Trail&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Joliet&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kennewick&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;La Mesa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lancaster&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lehigh Acres&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lodi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lunenburg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Maplewood&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mechanicsville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Middle River&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mobile&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mountain View&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Needham&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Newington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Little Rock&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nutley&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Olive Branch&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Owasso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Panama City&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pearland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pikesville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ponte Vedra Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Provo&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Redondo Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rochester Hills&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rowlett&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Salem&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sandy Springs&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Schererville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shelton&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Burlington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Springdale&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sulphur Springs&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Temecula&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tooele&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Union&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Virginia Beach&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Waterville&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;West Hollywood&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Westlake&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Wilmington&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Wylie&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Allen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ansonia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Augusta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Beavercreek&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bethel Park&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Boise&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bridgewater&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burleson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Carrollton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chapel Hill&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Clayton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Colonial Heights&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Costa Mesa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Danbury&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Denton&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dumont&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;East Meadow&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;El Mirage&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Essex Junction&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Farmington Hills&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fort Pierce&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gadsden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Glassboro&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Granger&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gulfport&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hattiesburg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Highland Village&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hoover&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Indianapolis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jonesboro&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kenosha&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;La Porte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Land O Lakes&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lemon Grove&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Logan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lynchburg&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Marblehead&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Medford&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Modesto&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Muncie&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Neenah&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Newnan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;North Miami&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oak Creek&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Olney&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Owatonna&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Papillion&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pekin&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pine Bluff&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pontiac&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pueblo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Redwood City&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rock Hill&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Roy&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Salinas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sanford&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Scituate&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sherman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Hadley&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Springfield&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Summerville&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tempe&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Topeka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Union City&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Visalia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Waukegan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;West Islip&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Westland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Wilson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Wyoming&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Aloha&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Apopka&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Austintown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bedford&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bethpage&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Boston&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brookfield&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Burton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cary&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Charlottesville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cleveland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Columbus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Council Bluffs&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Darien&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Derby&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dunedin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;East Providence&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Elizabeth&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Euless&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Federal Way&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fort Wayne&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gaithersburg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Glen Cove&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Grants Pass&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hackensack&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hays&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hillsboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hopkinsville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Inver Grove Heights&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kalamazoo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kettering&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;La Vista&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Laredo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Levittown&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Long Beach&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lynnwood&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Marion&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Melbourne&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Midwest City&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Monroeville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Murfreesboro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;New Berlin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Newton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;North Pembroke&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Oak Park&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Owosso&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Paramus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Penn Hills&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pittsburgh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Port Chester&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Puyallup&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Renton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rockford&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Russellville&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Angelo&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Santa Clara&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Scranton&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Shoreview&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Plainfield&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;State College&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sun Prairie&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tewksbury&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Townsend&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Upper Saint Clair&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Wakefield&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Wauwatosa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;West Linn&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Wheat Ridge&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Winter Haven&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Yarmouth&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Alton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Appleton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Avondale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bella Vista&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Beverly&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Boulder&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brookline&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cabot&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Casper&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cheektowaga&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cliffside Park&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Commerce City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Coventry&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Davie&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Des Moines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Durango&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Easthampton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Elk Plain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Evans&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Findlay&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Foster City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gallatin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Great Falls&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Haltom City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hazleton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hilton Head Island&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Horn Lake&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ipswich&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kankakee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Killingly Center&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laconia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Las Vegas&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lewisville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Longmeadow&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Madison&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Marrero&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Memphis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Millville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montebello&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Murrieta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;New Britain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nicholasville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;North Platte&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oakdale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Orange&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oxnard&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Park Ridge&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pensacola&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Plainview&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Port Orange&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Racine&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Revere&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rocklin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rutland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;San Bernardino&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Santa Fe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Seatac&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Shrewsbury&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;South Vineland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sterling Heights&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sunrise&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Texas City&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trenton&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Urbandale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Walker&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wayne&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;West Mifflin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Wheeling&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Winter Springs&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;York&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Albany&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ankeny&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Atlanta&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bay City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Berea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bloomfield&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bremerton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bullhead City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Carmel&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Chambersburg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Citrus Heights&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;College Station&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cornelius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dale City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Delaware&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Drexel Hill&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;East Lansing&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Edmonds&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Enterprise&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Falmouth&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fort Dodge&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fridley&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gilbert&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Grand Island&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gresham&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Harrison&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hicksville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hollywood&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Idaho Falls&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jeffersonville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kenmore&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kokomo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lakeland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Littleton&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lubbock&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Manteca&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mcallen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Metairie&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mission Viejo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mount Pleasant&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nashville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New York City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Haven&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Norwich&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oklahoma City&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Overland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Palm Springs&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pawtucket&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Phillipsburg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pomona&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Prescott Valley&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Redford&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Riviera Beach&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Roswell&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Paul&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Ramon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Scarsdale&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Shawnee&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somerville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Spokane&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sudbury&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Taylor&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Toledo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Twin Falls&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Victoria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Waterford&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;West Bend&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Westerville&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Willoughby&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wooster&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Aiken&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anaheim&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Aspen Hill&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Batavia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bennington&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bismarck&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Braintree&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bryant&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Canton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Centereach&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chicopee&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cohoes&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Coral Springs&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cudahy&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Deer Park&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Downers Grove&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;East Cleveland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Edinburg&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Encinitas&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairhaven&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Forest Park&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Freeport&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gastonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Gorham&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Greenwich&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Harker Heights&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hesperia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Holden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Huntsville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jamestown&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Keizer&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kissimmee&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lake Jackson&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Leander&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lindenwold&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Louisville&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Manitowoc&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mason City&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Merritt Island&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mint Hill&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Morristown&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Napa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Orleans&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;North Babylon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Northport&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Odenton&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ossining&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Palm Beach Gardens&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pasco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pharr&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Plymouth&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Prairie Village&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Reading&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rio Rancho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Roselle&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Joseph&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;San Luis Obispo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Savage&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Shaker Heights&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Smithtown&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spanish Fork&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Stratford&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tamarac&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tinton Falls&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tupelo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vernon Hills&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Weslaco&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Westborough&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Wilkinsburg&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Woodridge&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abington&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Amarillo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arvada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Baltimore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bellevue&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Billerica&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bowie&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brooklyn Park&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Calumet City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Catonsville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cheshire&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cloverleaf&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Conway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cranston&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Daytona Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dickinson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Eagan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Eau Claire&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ewing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Flint&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Framingham&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Garfield&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gloucester&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greeneville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hammond&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hempstead&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hobart&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Houston&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Iselin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kaysville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kingsport&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Laguna Niguel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lawndale&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lima&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lorain&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malden&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Martinez&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mentor&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mineral Wells&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mooresville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Muskegon&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;New City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Normal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North Royalton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oakton&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Orland Park&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paducah&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Parkland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Perry Hall&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Plantation&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Raleigh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Richardson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rogers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sacramento&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;San Diego&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Santa Rosa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seguin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sioux City&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Southbridge&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Stillwater&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Swansea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Thomasville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Trumbull&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vallejo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Walpole&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Webster&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;West Palm Beach&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Whittier&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Woodbridge&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Yucaipa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Allen Park&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Antioch&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Aurora&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Beaverton&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bethesda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bolingbrook&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bristol&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Burlington&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Carson City&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Charleston&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Clearfield&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Colorado Springs&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cottage Grove&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Danvers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Denver&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Duncanville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;East Orange&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;El Paso&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Euclid&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Farragut&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Fort Smith&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gahanna&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Glastonbury&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Granite Bay&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gurnee&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haverhill&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Highlands Ranch&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hopatcong&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Inglewood&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Joplin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kent&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;La Quinta&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lansing&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lenexa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lombard&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lyndhurst&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Margate&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Medina&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Midland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moline&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mundelein&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;New Albany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Newport&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;North Miami Beach&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oak Forest&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Olympia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Owensboro&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Paradise&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pembroke Pines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pine Hills&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Port Arthur&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pueblo West&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Reisterstown&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rock Island&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Royal Oak&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Salisbury&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Santa Ana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Scotch Plains&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sherwood&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Lake Tahoe&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Springville&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Summit&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Terre Haute&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Torrance&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;University City&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Waco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Waukesha&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;West Jordan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Westminster&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Winchester&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Xenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Albemarle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ann Arbor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Atlantic City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bayonne&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bergenfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bloomington&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brentwood&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burbank&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Carol City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Champaign&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Claremont&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Collierville&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Corpus Christi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dallas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Delray Beach&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dublin&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;East Longmeadow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;El Cajon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Erie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Fargo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Fort Lauderdale&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Friendswood&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gillette&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grand Junction&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Groton&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Harrisonburg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;High Point&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Holyoke&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Immokalee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jersey City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kenner&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;La Crosse&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lakeville&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lees Summit&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Livingston&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ludlow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Maple Grove&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;McKeesport&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Miami&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Missoula&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mount Prospect&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Natick&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Newark&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;North Kingstown&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norwood&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Olathe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Overland Park&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Palmer&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peachtree City&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Phoenix&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pompano Beach&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Prior Lake&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Redlands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Roanoke&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rotterdam&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Peters&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sandusky&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Schaumburg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sheboygan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Bend&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spring&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Suffolk&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Taylors&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Toms River&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tyler&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vincennes&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Waterloo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;West Chicago&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Westfield&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Willow Grove&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Worcester&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Acton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Fork&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Asbury Park&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bangor&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bellingham&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Billings&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bowling Green&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Broomfield&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Camarillo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cedar Falls&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chester&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Clovis&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Coon Rapids&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Creve Coeur&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dearborn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dix Hills&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eagle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Elmira&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Fair Lawn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Florence&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Frankfort&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Garfield Heights&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Goffstown&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greenfield&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hampton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Henderson&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hobbs&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Huber Heights&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Issaquah&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kearney&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kingston&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lake Charles&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lawrence&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lincoln&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Los Altos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Manchester&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Maryland Heights&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Meriden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Minneapolis&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Moorhead&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Muskogee&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New Haven&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Norman&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Tonawanda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oakville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Orlando&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pahrump&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Parkville&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Perth Amboy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pleasant Grove&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Portsmouth&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rancho Cucamonga&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Richfield&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rome&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saginaw&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;San Francisco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sarasota&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Selma&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sioux Falls&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Southbury&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Stockton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Syracuse&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Thornton&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tualatin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Valley Stream&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Waltham&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Webster Groves&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;West Scarborough&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Wichita&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Woodburn&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yuma&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:Product Name Set:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Product Name:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Bretford CR8500 Series Meeting Room Furniture&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fellowes PB500 Electric Punch Plastic Comb Binding Machine with Manual Bind&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Chromcraft Bull-Nose Wood 48\&quot; x 96\&quot; Rectangular Conference Tables&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Hewlett Packard LaserJet 3310 Copier&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Riverside Palais Royal Lawyers Bookcase, Royale Cherry Finish&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Hewlett-Packard cp1700 [D, PS] Series Color Inkjet Printers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sharp AL-1530CS Digital Copier&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Canon PC1080F Personal Copier&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Global Troy™ Executive Leather Low-Back Tilter&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canon imageCLASS 2200 Advanced Copier&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;GBC DocuBind 200 Manual Binding Machine&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Polycom ViewStation™ ISDN Videoconferencing Unit&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Azerbaijan&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Orders' id='Orders_8DC1B46268C04C95B7F61E646A008039'>
            <properties context=''>
              <relation connection='excel-direct.0g7t4xt0ecay0010puxy11932rkw' name='Orders' table='[Orders$]' type='table'>
                <columns gridOrigin='A1:X9427:no:A1:X9427:0' header='yes' outcome='2'>
                  <column datatype='integer' name='Row ID' ordinal='0' />
                  <column datatype='string' name='Order Priority' ordinal='1' />
                  <column datatype='real' name='Discount' ordinal='2' />
                  <column datatype='real' name='Unit Price' ordinal='3' />
                  <column datatype='real' name='Shipping Cost' ordinal='4' />
                  <column datatype='integer' name='Customer ID' ordinal='5' />
                  <column datatype='string' name='Customer Name' ordinal='6' />
                  <column datatype='string' name='Ship Mode' ordinal='7' />
                  <column datatype='string' name='Customer Segment' ordinal='8' />
                  <column datatype='string' name='Product Category' ordinal='9' />
                  <column datatype='string' name='Product Sub-Category' ordinal='10' />
                  <column datatype='string' name='Product Container' ordinal='11' />
                  <column datatype='string' name='Product Name' ordinal='12' />
                  <column datatype='real' name='Product Base Margin' ordinal='13' />
                  <column datatype='string' name='Region' ordinal='14' />
                  <column datatype='string' name='State or Province' ordinal='15' />
                  <column datatype='string' name='City' ordinal='16' />
                  <column datatype='integer' name='Postal Code' ordinal='17' />
                  <column datatype='date' name='Order Date' ordinal='18' />
                  <column datatype='date' name='Ship Date' ordinal='19' />
                  <column datatype='real' name='Profit' ordinal='20' />
                  <column datatype='integer' name='Quantity ordered new' ordinal='21' />
                  <column datatype='real' name='Sales' ordinal='22' />
                  <column datatype='integer' name='Order ID' ordinal='23' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Extract' table='[Extract].[Extract]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='1) Group least sold 5 sub-categories with the name of “Other” and create a chart that shows subcategories by profit.'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Sub-Category (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[Product Sub-Category]' new-bin='true'>
                <bin default-name='false' value='&quot;Others&quot;'>
                  <value>&quot;Envelopes&quot;</value>
                  <value>&quot;Labels&quot;</value>
                  <value>&quot;Pens &amp; Art Supplies&quot;</value>
                  <value>&quot;Rubber Bands&quot;</value>
                  <value>&quot;Scissors, Rulers and Trimmers&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Product Sub-Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[Product Sub-Category (group)]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[Product Sub-Category (group)]</cols>
      </table>
      <simple-id uuid='{49C1D7D6-5B66-4D12-8D8D-AA8E0591B65E}' />
    </worksheet>
    <worksheet name='2) Create a set that shows top 10 products by sales, then compare these products by profit._1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Product Name Set]' derivation='InOut' name='[io:Product Name Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{9637CD7A-BB45-47DA-8DFB-3E42752798FF}' />
    </worksheet>
    <worksheet name='2) Create a set that shows top 10 products by sales, then compare these products by profit._2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Product Name Set]' derivation='InOut' name='[io:Product Name Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]'>
            <groupfilter function='member' level='[io:Product Name Set:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Sales:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{480B56FD-F5E2-486B-B4D3-BA2B070D54E2}' />
    </worksheet>
    <worksheet name='2) Create a set that shows top 10 products by sales, then compare these products by profit._3'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Product Name Set]' derivation='InOut' name='[io:Product Name Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]'>
            <groupfilter function='member' level='[io:Product Name Set:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</cols>
      </table>
      <simple-id uuid='{529E6CB2-578C-4F6F-83BC-B6F6AB744972}' />
    </worksheet>
    <worksheet name='2) Create a set that shows top 10 products by sales, then compare these products by profit._4'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Product Name Set]' derivation='InOut' name='[io:Product Name Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]'>
            <groupfilter function='member' level='[io:Product Name Set:nk]' member='true' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{467A8590-BACD-4810-87CF-E3D4E89AA306}' />
    </worksheet>
    <worksheet name='3) Create a parameter to filter top N product names (with a default value of 5) by Profit, then show profitproportions by product names.'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='5'>
              <calculation class='tableau' formula='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[pcto:sum:Profit:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Profit])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Product Name:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' />
              <wedge-size column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]' />
              <text column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Hewlett-Packard cp1700 [D, PS] Series Color Inkjet Printers&quot;</value>
                <value>33721.100200000001</value>
                <value>0.15557985073779154</value>
              </tuple>
            </tuple-reference>
            <label-position x='17' y='-26' />
          </mark-label>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Fellowes PB500 Electric Punch Plastic Comb Binding Machine with Manual Bind&quot;</value>
                <value>35909.525184999999</value>
                <value>0.16567663970665067</value>
              </tuple>
            </tuple-reference>
            <label-position x='-17' y='-34' />
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;GBC DocuBind 200 Manual Binding Machine&quot;</value>
                <value>33892.328502999997</value>
                <value>0.15636985087612704</value>
              </tuple>
            </tuple-reference>
            <label-position x='-30' y='1' />
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Hewlett Packard LaserJet 3310 Copier&quot;</value>
                <value>33712.303299999992</value>
                <value>0.15553926426876061</value>
              </tuple>
            </tuple-reference>
            <label-position x='34' y='-1' />
          </mark-label>
          <mark-label id='4'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Profit:qk]</field>
                  <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[pcto:sum:Profit:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Global Troy™ Executive Leather Low-Back Tilter&quot;</value>
                <value>79509.392200000002</value>
                <value>0.36683439441067012</value>
              </tuple>
            </tuple-reference>
            <label-position x='4' y='37' />
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{B484BFD3-7FB8-4E92-BFEE-2FE590030E80}' />
    </worksheet>
    <worksheet name='4) Use bubbles to show Cities sorted by &apos;Quantity ordered new&apos; and assign color for each Region.'>
      <layout-options>
        <title>
          <formatted-text>
            <run>4) Use bubbles to show Cities sorted by &apos;Quantityordered new&apos; and assign color 
for each Region.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='integer' name='[Quantity ordered new]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Quantity ordered new]' derivation='Sum' name='[sum:Quantity ordered new:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:City:nk]' direction='DESC' using='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Quantity ordered new:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Region:nk]' />
              <size column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[sum:Quantity ordered new:qk]' />
              <text column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:City:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{944E6D0F-633D-4F41-8B01-6BD4C9BFECE3}' />
    </worksheet>
    <worksheet name='5) Create Scatter Plot showing the relationship between average Profit and Sales by Product subcategories.'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (sample-superstore-subset-excel (1))' name='federated.1ynts8t0pcvv9g1dm48mc0uftjkt' />
          </datasources>
          <datasource-dependencies datasource='federated.1ynts8t0pcvv9g1dm48mc0uftjkt'>
            <column datatype='string' name='[Product Sub-Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Profit]' derivation='Avg' name='[avg:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Avg' name='[avg:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Product Sub-Category]' derivation='None' name='[none:Product Sub-Category:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Sub-Category:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[avg:Profit:qk]</rows>
        <cols>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[avg:Sales:qk]</cols>
      </table>
      <simple-id uuid='{9C314D5F-CF9A-4DC2-A642-C7E5E0513AA6}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='1) Group least sold 5 sub-categories with the name of “Other” and create a chart that shows subcategories by profit.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[Product Sub-Category (group)]</field>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3CB77237-BB19-42CF-A43C-C477CA8CAF59}' />
    </window>
    <window class='worksheet' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</field>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{209A5BEE-3E98-43F7-B94C-7BAC7A8CCAAD}' />
    </window>
    <window class='worksheet' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</field>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E93137E5-E114-4743-AAA5-11994898D7B5}' />
    </window>
    <window class='worksheet' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[io:Product Name Set:nk]</field>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0CCEB843-731B-497D-B036-16534D8107EC}' />
    </window>
    <window class='worksheet' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5325D3EF-9875-4DCF-A1D7-B27AE1A2C0C0}' />
    </window>
    <window class='worksheet' name='3) Create a parameter to filter top N product names (with a default value of 5) by Profit, then show profitproportions by product names.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]' type='color' />
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C3A40F32-F731-4979-99D5-20C0EF32B470}' />
    </window>
    <window class='worksheet' name='4) Use bubbles to show Cities sorted by &apos;Quantity ordered new&apos; and assign color for each Region.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:City:nk]</field>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C061B193-6D71-4AB0-9CDC-9E4E23AE89F5}' />
    </window>
    <window class='worksheet' maximized='true' name='5) Create Scatter Plot showing the relationship between average Profit and Sales by Product subcategories.'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ynts8t0pcvv9g1dm48mc0uftjkt].[none:Product Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D7B0517B-3393-44E6-A1B2-1339F41B9AAC}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='1) Group least sold 5 sub-categories with the name of “Other” and create a chart that shows subcategories by profit.' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._1' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='2) Create a set that shows top 10 products by sales, then compare these products by profit._4' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='3) Create a parameter to filter top N product names (with a default value of 5) by Profit, then show profitproportions by product names.' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAMtElEQVR4nO3dyW8cV2LH8W9V71yapCRSpGRroUztphzZmowdGzM2JjnMnCYIEiAIkL8g
      l9xyCyanHHPIKaccEmCA8QIP4vGisWFIGkm2rI2iuJOiJC7N5tbNbrKXqno5jOOMx5JFSqzu
      lt7vcySr671Df/mqml1VjjHGIGIpt94TEKknBSBWUwBiNQUgVlMAYjUFIFZTAGI1BSBWUwBi
      NQUgVlMAYjUFIFZTAGI1BSBWUwBiNQUgVlMAYjUFIFZTAGI1BSBWUwBiNQUgVlMAYjUFIFZT
      AGI1BSBWUwBiNQUgVlMAYjUFIFZTAGI1BSBWUwBiNQUgVlMAYjUFIFZTAGI1BSBWUwBiNQUg
      VlMAYjUFIFZTAGI1BSBWUwBiNQUgVlMAYjUFIFZTAGI1BSBWi9Z7AiK1ZIzBr3iUiyUqxbIC
      kGebMYZyYYO1bJ7c7DIr97IUl/KUi2Uq6wpAnkHGGNZXCixOzbMwOsvqzBKl/DqBH3xnWwUg
      zwyvXGVhbJb7N6ZYvpulXNh45GsUgDz1NvLr3L8+yd2rExSX8pjAbPq1CkCeWqW1De58McL0
      lTFK+Uf/tX8QBSBPHb/iMX1ljLFzg5Ty60+0LwUgTw1jDEt3Mtz64Aq5uWXY/JHOQykAaXjG
      GLxSlZHPbjB5aQTzgE9zHpcCkIZmjGF1donrb/+OfGZ12/evAKRhBX7AveuTDH7wJdVSNZQx
      FIA0JL/qMfzbG4yfH9yWY/2HUQDScCrrZW6+f5mZgTuhj6UApKGUCyWuvn2BhdGZmoynAKRh
      lNY2uPqr82TH52o2pgKQhlBZL3P9vYuPePMHLC5Oc3vuPscPv8EuZ5n3v7xAyRheefHP6W1L
      AXD+6vvMrjsc2P8y/TtjnLt9BT/RzZn9PXw59BVd+37A0RaPbNCqAKT+vHKVgf/5kszI/Uds
      6ZBIdbCvY5VKAJVKjp7eH3Kmp/MPtgmINHXz16d/AASMjFzi0JG3ONAcZS47yuGDL5FZWeCe
      n+C57i4cY0yI59gi3y/wA4Z/e53xc4Ob/hLb7OwN6DhFR+UuH9z6CifSwssnXmd/awqo8OH5
      dym4rbxwsJ/i7BCrfhUvmubMwT6GJm7Q1L6XJEWmFxYVgNSPMYZ7Vye4+evL+FV/06/7vwDa
      WcVzmnAKw3y11sWPD3aDX2C+6LIzXuLTsXF6kw6JPf0EK7cpxXs53BFhZGGJcmmB7rQOgaSO
      VmeWuP3JtS28+T0Ghy5ycyEDqVXePHKMsckvWTUtvH5iJ6PzU/R27iUzc5ELuSqvHH+VnniF
      S0OfU0n28GeH0xTWs3R1dBGtGC6MT2sFkPqorJf54r8+Y+nOQl3nobtCSM0FxnB1dIKlhZV6
      T0UBSG0ZY5jJrfKbxWkGTrVS7mkBp37zUQBSUxXf58PRYUqex1rUcO1QjPkTHZhkfU5HFYDU
      jDGGgflZxpcXv/lZ4MBkBwy+lKbU3QxObZcDBSA1s1Gt8vnUxAN/l48ZbvTFyRxvq+lqoACk
      JowxXJu7z0Kx8NBtfGBih8PtU2nKu2uzGigAqYkNz+PcnclNbZuLG64fjrNwtI0gEQl1XgpA
      QmeM4XZmjpWNzd+6xAfGdzqM9KcpdzWFthooAAldYAwX701v/YUOrCThZl+ShcNpTHL7VwMF
      IKG7u7rC/dzjX9BedQ3jXS4jJ9OUO1PbuhooAAndtdlHfc15c5ZTMHA4SbYvjdmmcwMFIKGq
      +j63Fua3bX8VF8a7XMZeTFPZlXri/yIrAAnV+NIixUplW/dpHFhMwc3DSZb62iD++KuBApBQ
      DWUzoe27EoHRLpex/jaqO1KPtQ8FIKExxjC+lA13DAeyKcP1Y0lW+tpwIlt7SysACU22WGC1
      VKrJWFUXhna7jJ5ux29Pbvp1CkBCM726gh9s341sH8mBbNLw1ckm8i+04biPPkNWABKaubV8
      Xcb1HMOtHpfx0x34bYnv3VYBSCgMMJPP1XUOmZTh2slm8r1piD74ra4AJBSe75P9nm9+1krF
      NQzuiTD1YjveA1YD3RVCQrFWLuF960EWhnIuy/0bt9h5+i3ak0WGPjrLSr7E86/+hOcP7ATg
      3sWPuTe1Qnvfyxw9muTSu+eJNDdx5M03mbv0GYneV9i/L8VyztDZs2NTczEOzLUYVk80cWg2
      Tvp+Ebzfz00BSCjy5TK++fYJsFfyaO9sYqMM6WCNyHPHee1U3x9sYaiYFGf+5i+IRaA8eZHu
      n/wVvXuirC+M0LT/T6gszbEcaSbZfXDLc9qIwODzUfa0t7F3skg0X9EhkIRjrVwm+NYddxya
      d+8h9fXVXn4Ay4MXuPzeb8hm177epkrx3iRX3n6XO+PzlEs+05++w7WzvyOI7yQ/+gUl37BR
      KDB29mMyma2fZBtgphVunWghv79V9wWScFy+N807gze/8/P1qSvk0q/Q1bpOtRrBKU4zOml4
      8YdHwC9TLPqkUobrZy9x/LVXiLa0krv9OfmWMxzYFyczNoVfXiaa7iK/FqWvf/9jz9FFh0AS
      kor/x3d7C8hcucDYwCheap7IG6dZvnmN3IZD7+tvsDg9SXPnbrI3LzM/s0r36VfxC1kGPzmL
      k97NsR83Uy0uEkl3ko7EGDp/iz2v/eiJ5hiAVgAJx6cTY3w0NlzvaTySzgEkFNXvrACNSQFI
      KNwa39/ncSkACUXUbfy3VlNUJ8ESkkS0cd9a3YkS/ckxDkcGFICEIxWL4RDqI363JObCkVSG
      U4lBupkgQhUHrQASkqZYHNdx8Ov4IaODYUfcpz85wonYLZrM0tc//38KQELRlkziui5+HT4N
      ijk+h5pynIoPsM8ZxsV/6FKkACQU6WSSqONSpTYBuA60RSucTExyMjFM2sxu6nUKQEKRisVJ
      JxNsFKqhjpNwfZ5PrvFibJCDkVFibGzpxEMBSCgcoKc1Taaw/dcEuA60R0ocTd3nWGyYndzD
      eczTbQUgodnXvoPrc5s7FNmMhBuwN57jZGKYA5FJUjz5FWcKQEKzv72DyBN+EuQA7bEyfYk5
      jsUG6XJmcPG2bY4KQELT3ZomFYtTqJS3/NqYC3tiy5xMTnAgMkkzS6E8S08BSGiirsv+jg4G
      M5u/N2hb1ONQYo4TsVt0ubNE2Xo8W6EAJFRHO3c/MoCIA3vjOY4nJzkYGaOVpcc+qd0qBSCh
      OtHVzfvuLarBd/8f0BINeCE+w4n4EF3uDDE2av7IYAUgoWqOx+nb1cntr2+R7gA9iXVOJMZ5
      ITJEi7OCSw3vHvdHFICE7qWevYwvZjicnKE/OcJupohRqucD4r+hSyIldFWvwvzAP5KqTtX1
      r/2DNP5VC/LUi0Zi7Ow803BvflAAUgOO45Ds/Cm4m79tea0oAKkJJ76TxK636j2N71AAUhOO
      45Ls/kucSEu9p/ItCkBqxk30kOj6Wb2n8S0KQGrGcVwSXT/DTXTXeyrfUABSU258F6k9fwvO
      9jzo+kkpAKkpx3GI73iDWPuf1nsqgAKQOnAiSVJ7/w43vqveU1EAUh+R1AFSz/09OPG6zkPf
      BZK6+P2h0I/wimOUM78m9FtomYDLFzJcnFhn9752fv5qmo/Ozum7QFJfQTVHYeJf8fLXwh3I
      GErlACfw+PDcMr3dMZaSTToEkvpyY200H/gHIk294Q7kOGysFvnPX80SaW9io+IxenleK4A0
      AoNXnGBt7BeYSjacITyfubxPZzrCx5/O0d3ZxEoqoRVAGoFDpOkQLYf+CSe2uUefPsYQ3B9d
      4t//e5pETzv9/e20LOa0AkjjMMbgF0dZG/1njLdakzEVgDQcrzhBYewXBJWF0MdSANKQ/PIC
      hbF/wV8fD3UcBSANK/DyFKf+jerKJQjpajIFIA3NBFVKmfcozf4S4xe3ff8KQBqeMQHe2gDr
      d/8Df32S7fyvsQKQp0ZQzVHKvEs58wHGX9uWfSoAeaoYE+AVhinN/ZJq7jqYyhPtTwHIU8kE
      Zaq5q5Tm38FbG4LHfBSTApCnWuAVqeavUc5+iJcf2PKKoADkmWCCMl5xnEr2E6r5qwSb/E6R
      ApBnijEBprpCdW2AyvJ5vMIwprr00O0VgDyjDCbwMf4a/vo01fxVvMIofukuprryzVYKQKxg
      jAFTxQRlTGUZb2OSoKzrAcRyuh5ArKYAxGoKQKymAMRqCkCspgDEagpArKYAxGoKQKymAMRq
      CkCspgDEagpArKYAxGoKQKymAMRqCkCspgDEagpArKYAxGoKQKymAMRqCkCspgDEagpArKYA
      xGoKQKymAMRqCkCspgDEagpArKYAxGoKQKymAMRqCkCspgDEagpArKYAxGoKQKymAMRqCkCs
      pgDEagpArKYAxGoKQKz2v0yL8K3DtKiMAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='4) Use bubbles to show Cities sorted by &apos;Quantity ordered new&apos; and assign color for each Region.' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d5xdV3mo/ex2epszvUkzoxmNeu+y3LvB2KbZlNBCEkq+BG4SbiA3ITdf
      7gcXAiSBfCQ3JsSmGGxsY2zLXZJtSSPJkqZIo+m9z5nT2+73jzM+kmKSm+QS7KDz/Df77L3W
      2vNb717vetdbBNu2bUqUuEIR3+wBlCjxZlISgBJXNCUBKHFFUxKAElc0JQEocUVTEoASVzTy
      mz2AEiV+Gdi2TUbTUCSJvsV5XLJCW0VlSQBK/Grz+sSfSSX52YVzlHu8zKQSBF1uJhOxkgCU
      +NXDBlRdJ28aZDWN73eeRjMNkqqKIknc0b4OEPhZ37mSAJT41UE1DNKaiktWuP+1DjKaxtqq
      apayWcIeD+/asIZEPsdEPE59MIgkiCUBKPGrgWoYfOf0CRbSKTZU1zKdTABgWCZ3rl1PfTCE
      aug8ceEcmmnikmUONLWUBKDEf04MyyKWyxJ2e8hoGrOpJNOJBLplktZU9q5oYj6dYnhpie7Z
      WSq8XprKwmimCUDeMKjy+ksCUOI/F6ZlsZTN0B9Z5NmBPnY1rqBrdgbV0Al7vAhARtMIOF2s
      r6rhZ33nAZhOJqgLBAi7PURzWWp8fsIeD0LJG7TEfwZen6ZnZ6Z5+Fwn2+oayBsGNjbn5+cA
      aAqFieWyJNQ8AG5FQTUMLNtGFATes3ELbRWVHB4ZYiGdpsztLq0AJd7aWLbFdCKJIMCLw4O0
      VVSyqaaOzbX1KJJEWs0zGo2imQa1/gATidjFZy2ba1taOT8/R3NZmPVVNYzGohyfGMOwLKB0
      EFbiLYpt2xiWxVQizrdPHqMxGGI2lWRlqIwbVrXxndMnieWyVPv8fHTHLpySgt/pZDgaYSGT
      BsAly3TPzhDJZljMpLFsm4DTVZz8QEkFKvHWw7ZtXhkboXdhjpZwOWlNQxIERmNRKr0+vA4H
      xyfGivdf19LKYiaDbhpFs6eAwFQyzkh0qXifKAjsW9HEmZkpsrqOIAglASjx1iOSSfP1o0cw
      LAuHJPH+LduXD7MKFhy3omCYJvry76IgkDcMoPDV/9zVN6BIEn936jgT8dhlbd+6eg0NgRB9
      C3OExidLznAl3no4ZBmnXNDOXbJCRtOKkx/Aoyi8bc16dtQ3ctvqtUjixWmcNwzi+RyaabIy
      VHZZu05JZmUoTGu4nFt8QZofe6K0Byjx5mDbNnnDQBFFZEm6eB2I5bKsraxGkSS21NZT7vFS
      7fMzn04hCgJ1/iDTyQSTiThL2QxOSSaDBkBDIEjvwhzn5ufwOhysrqhkIZ1GkST2VdWwwuUm
      d/IUiccex719e0kASrw5TCcTPHa+mxWhMvY0NjEcixRs824vD559jZSqsn9lM43BECPRJdrK
      K2kIhmguCzMYWeTk1ESxLZcsc+Oq1XgcDmr9fv7XqQ6sZc3+upZW7lm/GWF+HvUfH2RJAOfq
      1di5LO4tm0sCUOKXi23bZHWN6WSC6WQC1TQZjUWZTSVxyTL3bd5WWAaW7+2cnebR890YlkXQ
      6WJDdQ0zqeRlbeYNg2oEmnr7SXo9xeuCbSP09SMNjGAlk6gXLgDgbG9HCoeJ/+CHJQEo8ctl
      Lp3ih11nCLpc3LVuIwGXiyeXT2vzhkFO11ldWcVkIsaKUBlnZ6aLZsuEmmcsFsWjKJe1KQoC
      4kuHiR86DIrCDZ/8DXosnapYgtZHHiOu6UjhMI7VbYgOJ1YyhdrXD5TOAUr8kih8+XWmEnEW
      0ik008SybUZjUSo8XhySTLnHw+GRIebSKQB+cq4Lp3xxsouCgN/pZHt9I0vZDGlNQxQEdlfX
      UjW1QH75vq19g2wIhfDU1hLXdAAERSH88V8HyyLf3QOCALZdMoOW+I9FM03Sqko0l+XR813k
      DYManx+vw8n5+VlM20YSBK5taUUSRZ4b7L/seVkUaa+oIq2pmLZFIp9HFAQ21dRR6w8QECW8
      D3wfs78fZ1sbNjZqVzcIAv63vw10HXVkBPfWrai9F9DGxlBqa5DCYYxIpLQClPiP5WB/L11z
      M5R7vCxlswDL+r6CufztNW2bgcgi5R7vz23j+lVtBF1uHjh7ipSqAjC0FOG6ljac8Thzw8PY
      2SzYNlLAX3jItrF1nbIPvB9b18l2nCDf3Q2AmkxS/qlP4t65oyQAJf5j6Fucp3tuhoym0RgM
      4ZBkJigcSjllGbeiQO7i/Q5JpiVcTvfcTNGCAxB0uijLZJF0A6/iKF53yTL6a6fJd3bhXN2G
      PjmJmUggBQK4Nm1EcDgQRJHo39+Pe+sWRJ8XRBEsC0QRMRjE1vWSClTiF08yn+evjr9MSlUR
      BYHP7L8W3TL42YVe3IrMgaZV6KbJj7rPktE1fA4H923aRnO4nCf7znN8chzbtgk4nbx9MUbZ
      kwcRnE7sX/8oR12FlePqcAXSX3wDY34eR0sLZjSKGY8D4L/z7YhOJ4lHflLQ851Oyj/9SYyF
      RfLd3bi3bsV77bUs/fVfl1aAEr94bOyi+7Jt2wxEFnhmoA/DtthW18CKUIgLCwvUBgJEc1na
      yiup8PoQBYE7125gb3klselpVq5fT+IrX0PVNGxNw9fXxx2NjeROn8G1Zg25shDGwgKi34c+
      O1vs35iZwdY0eH0Mqoo2No5rw3q0oSHUoSHEgB91YLC0ApT4xWHbdtH3vndhnjMzk6ytrKZn
      fpa+xQWg4MeztrKaMzNTlz0bdnv42I7dlNkw//k/wlhYIPiudyIGAsT+8QFEtxvfTTeSfOJn
      YJogipT/9qeQysrANEk++RT5c+cRHQ4qPvM7qANDJB5+uLgCBO+5m+TPnsRKFzxFBY8HDKO0
      ApT4xWDbNh2T45yfn2XvimYymkZO10lrGtU+f1EALMuma3bmDc9Hc1kOjw5xZ3k15vIk1Wdn
      cVVUoNTX42huQgqHC5O/0BD6+ATJRx9Hn5xE8Hgoe//7cO/aiZVMoqxcQfCeuzGWori3bcGM
      J4qTH8DOZvFctb8kACV+MaRUlZdHh4nmsiTyeRL5HKppMhxd4tN7DyCJImlVxaUovDw6/HPb
      mEwk0KvrcW/ejK1reK8+wOJXvgqGiT45iRQK4dq4AW1kFGXlCmxNQ5+cBAoTOt/Tg7EUIfXk
      02DbKCtWUPl7n0WuqiLX1QWSdFGAZBn/TdeXvEFL/N9j2zaiKNAYDOFzOFhVXoHHUbDYOCSJ
      qUSM8ViURD6PeUkwyj9F1jSWvvo1ssePo42OIogSmNbrnQAQuOduAu+4k/BvfBy5trZwoPX6
      OFSV1MFni/fqExOkDx8BwLV2LYE7bkcKepACTny7q7AXni+tACX+feQNnb7FBZpCYcZiUY6O
      j1Dm9vDhbbtQlr07l7IZttTW88SFc0V//cmEgkdRyOr6G9psVZwIkQg2YC5FETwevNddS76z
      E7myCtswWPz/voytaWSOHaP8Nz6OZ+9e1L4+pIpyfDffRL7v8oM0O5fGzicwl4YI3LoPRXwJ
      LBFr/lmMkeaSAJT49zEajfLDrjMcaGpheCnCTCrJRCJOyO2ma3aGeD6HQ5JoLgsXJz+AgMCB
      phZeHR8lrRUOtURBoL2iiqvWbkDtPId6/jzO9nZElwvHypU4V7fh2rSJpb/8q4J1B9DHxtHG
      J/DdcD1yVRWe3TtRVqzAvX0buRMnAZBCAWROkXu6A7lpP9rYUVDnEVxBBF8Vcv22kgCU+Ldj
      WhZpTWVlqIz11TUsZTPMpJI4JInZZJJ4vnDCpZkm4/EYTWWFVQJgZVkZVzWsYOXIGMNLCfRN
      G2iorGJ1RSX0D5Je1vVD993Lwpe/jDEzi+B0Ev74ryMGgxcHIUnok5PEv/c9rEyW7LGjVP/p
      Fwl/5P2kXKPgbUX2xRBy58HyIwTqwVCxUvMQG8V54PcQPOGSAJT4tzOdTPB4bw+mZTGTTHDj
      qtU0BEI0hkIsZbMMRiPFc4Byj5frWlrpXZjn1bEREvk88a4u5H98kHbbonzFSlwrmiGnkjx9
      Gn18HIBcVxfGTMG2b6sq6sAAvhtvxIonsPJ53Dt3YGsaVqbgXmEsLKKNj+KoBMU3ieBOY46f
      AF81ruu/QP7Il7BmuxF8VeCtwEpOo7/69ZIAlPi3IwoCAgKCINC/uEjHRGHSVni9bK2tZypR
      CEZvDIW4trkVr8NJa3kFs6kkS9kskigve2MKZI93kHjscQRJwr19O462VkSXG0dzE0pDPfrU
      NIKioI2Oke/qRpBlAne/A8++fagXLpA5dBgrnUauqcGee47cmcO4b/8KevfDmACmht5/EFvN
      IPiqsQ0VwbYxJk+CZSB98Ytf/OKb+L8s8Z8M07boX1zAsEx2N65kLB5lPp0io2vE8zkkUaBr
      doacobO6ooo1lVU8ceEcBwf6yOkab1uzjspQGUp9Pe7t28mdeg1jdg4rmQRJJvTOd5I9cZLM
      kZdRmlYSuPPtuNatJXP4CFYqhZVKYUajePfuRa4IItk9uLbsJnDbDYhKHis5A7IT9Axy643Y
      mUXMoRcgn0SsaMWOjYGeRVDcSBWrSytAiX8bM4mC+mPZNrX+IF7HRQc107I4NDxEbHkPcGRk
      iPpAkBOTE9jYJNU8XV2dSE88ja1rlH3wg4iXRHCJLifZEyeKtv3cmbOE3vvego/PJUHxVi6H
      bRjY6WlEcQHBaaAd+l/Ia27Hde1/JfujD4JloGy+F8HhKzxkm4j+WizHIGhpxFAjdmaxJAAl
      /m24FQVFlNAtk5DbTX0giGlZuBWFnQ0r+GnvueK95rJbhCQKGFZhT+BcXMSYngZAn5rEd9ON
      ZOQjiMEAwXe9i9zJk8XnBVnCNk1EjwfX5k3ku7pBlvFdcw1kJ8g/+wWUje/Gig5hZ5ewIkPY
      bSYoblBTWPO9IEoI7jKkpgNIVWuwM4uI5a2F/ic6Sr5AJf51aKbBkZFhYvksq8IVBJwuXpue
      pHdhDkWUeNvadWytbeCl4UFeHB7AtG021tRy76atdJ49y9lchppwmKtFBe3Jp7ANAyuZQp+Z
      KVp53Nu3YWUyJB5+BH16Bs/OHaSefAozkyF03704VjRiJ4aw46ewZk4j1W3FmDmDnV5AbtyN
      MXEcRBnHjo9iRfoxBp4tDF5249hyH1rnD8DIg+xCXnUdRv8zpRWgxL+OQyNDvDQ8CMBIdIk7
      2tfROVv4kmumyatjo9QHQmR1jRWhMJtr69jZ0Ig9O0fVN/6au/bvx9HYQPKhHyG4XHj27SPd
      2QWAnc+TevppnO2ryRw6jDG/UNgE19dhLC4CoM/M4Lv2KvS+Hsz5OIK3AlvPgpYFU8PKRgqT
      G7DmurFN7eLgjRzG6CvF3zHyiN5K5FXXlgSgxD/PUjbDc4N9hNweFjMXHclyul6MzHodw7J4
      5FxXMRPbfDrJ2spq3KkUrvXr8GzcQPqFF7F1HVvX0QYHL+/Msojd/x2yHScAyHd2og0PE7j7
      HRiLEXx71qGf+wna2QdRVt+KdurvAXBc9VnEQB12eg41MgiWgdx6I1ZyGnP8WKFtyYmy6d3o
      3T/Gio4gOP3ovU9g5xMlASjxz3N8YozOZc/NW1evYTQaRTcNNlTXsr2+kfF4jJ75WRRRZHt9
      Q9EcCpDVdWaHBvF++at4du7As2snZjyONjyM6PEQuPsu0i++hHr+PKLXi2f3bhKPPX5Z/2pf
      P2Uf+hBKbQW5xz+JbWoIzgBWeh5cQRBEjMHnsObPF1SfvZ9EDDZgDDwHWMhr3w5aBis1jzH8
      ElLDTpwHPot26n7M6dNAKStEiX+BxmAIlyzjVhxsr29kY3UtFxbnWV1RhSJJXN28quD1aZgY
      pkWF10s0VziYCjmdlOfyCFu3gCCy8KUvo9TXU/UnfwxA5vBhMHT8d9yO/9ZbsHWdxE+fuHwA
      ooggCmjdPwLbws7HseMT2FoGzzu+hW1q5A9+DrDB0jFHX0GPj2NnCwlxxbJmpKb9WMMvAWBO
      dGBFR7Dik8UuSgJQ4p+l0uuj3OOlwuNFFkUe6D7LZCKOSx7gzrUbeHF4oBjoPpNKsLNhBTe3
      tpPNZtisuFC//BUcTU2oQ0NgGKjne5ECAYyFBTIvvwKAOjCIa9NGnK2teHbtJP3iSwWTpyDg
      2bkd1EHM0ZexMgtIVesw8gkEVxDtzAPYmUVsLbM8WgHBXYY9110cv5WahdGXL3snKz5ZiA1e
      piQAJf5ZzsxMFTO4NZWFmUwUYm7zhsGR0eHi5H+dyXiMWzasJP+d7yJXVyHcfBOC04k6MFC8
      x4wn0Gfnin/bmkb+fC/p51/AiCzhPXAVgiwjV4fxbGok9+iHkVquRfTXYufjuK7/I/Rzj2IM
      PrfcgoDcdhNi5VqUtpux0nMFlQiQKtsR3GGs+MU0imK4CbntZtRXvgZqsiQAJd5IPJdjOBrB
      KcuE3R5cskxDMETI5SaezyGLIo3BEAvpFJfa0B2SjJBKYczNYufzCE4HxmIE0edFkBWkigr8
      t95M9sRJtJERME2kygrMxUWyxzsAEN0uKj79UfLP/D7mzB4cez4JooR27K8Lv5e3YWcjl/Rq
      I5a3Yc51Yww9jxhcgbxyP1YmgrXQixUZAMWD4PQjBOpw7vt/iLmb6W6S2OIcKglAictRDYNH
      znUyuBTBrSjcvnodnbNT/ORcFy3hcso9Hiq9Pmr8AWK5HCPRgv++W1bYaUH67+9HcDgQ/T6y
      RwtWGEFRqPjD30VwOsj39gIC/ptvQvT7cW/dij41SebYcTAMpPLygmqTjWHFRpHqtyMobsSa
      jaDnkBp2gG1hRUfBMhCCjejnHsVOF1YVa+ECjqs+A/EJrMW+Qv+BOtx3fA2xvIWcpfDMyxd4
      +FWVP7jvvSUBKHE5mmkUN7I5Xee16QnGl02bkWyGT+89wJnpSZ4fGsC0LVrCFbSEy2ktryD4
      0mFS/cvqjnBRz7YBbWSkEJSeKNTvFVwuAu+4E6WxAaW+DjAxY0s4qlXyz30BqekqjOGXMPoP
      guzGec3vYcXG0Tr+BiQHyuZ7EUONiMEV5J/9/GXvYM10gnRJ/lBBJKeUk03bfOfpEyQzKvfd
      sIFXuidKAlCiQFbXOTszRaXXy57GJo6OjxZCHJ3OogAAdEyOXWbuzKga169qY6XXR66xEbWl
      BdHvI/jOd5J8/HGMhUVc27aSfPKp4uSHwuFX8qdP4Fy7FufKamTHAKI8BJkAVnQYHB7sZOGg
      DSOH0fc05lwPLB9wCQ4vzv2/A9gIgTrs3MUxZsvWo6zci5yLYmsZIg138q0fnyOnFgJzqsq8
      bFtdy9MdgyUBKFGgb3GeJy6co8bnpzlcjm6Z5Ayd61a1sZTNMJ9OsXdFEwPLJ7Ovo5oGw6Mj
      BA+/ijZaCFYPf+yjGDMzyA0NhSIUVZWknvjZG/q083nUrpNY549g5xKI4RZQPDiv+zxS427y
      T/8eVmQQFA9iRVvRdg9g52KYU69hznYhBhsLp7yiTCa8mT87VY37/AL/7X3fwOcUGOuL0T9Z
      2GPUV/gZnonyj892sWlVdUkAShSo8wdoCZdT5vZwYWGejKYxtBTh9PQkS9kMqmEwHovhki+f
      MgLg6Rsg99prAJjRKKmfPUn65VcK+TplGd/11/3zHUsSICCGGjEnjmHn4rjfdT9WdBSxoh0x
      3Iqy9X2IwUasxX7MmbMgOUDxknvmv0J+WaXyVuK646skHK1MH3sGVybJZEync2gOw7TY3FqN
      blhMzCdI5zRiqTy/f+++UjxAiQI2BR2/IRgir+tEshlcssx0MkFa0zAsq/i7ZdtkdA0B2FBd
      yz6PF/30mUI2BlFEECWMuWVTp2UhBgqhjJfm5QEQfT68Gz1Y04dxbP8QguJB8JQjODyoL/4Z
      1uIFrMQU8oq9iO4gVmIKQRBxbL4Xa7HvoooEoGfBsghtvJVwwMP125p54fQoT3cM0j+5xO17
      2rhl5yomFxPMRzMEvU7aGstLK0CJAv2LCxwdH6Xa5+c9G7fQEi4n7PHwcE/nZfdZts1v7d7H
      eDyGQzcIHjuOmM3hv+lGtIkJlIZGpIAfdXCwkIgWcK5uI3jP3Sx962+KgiH6/YTe9x6U8CJG
      th07G8U2VORV12JOnQZz2dfIyGP0H0Tr+BuspSEAzPhkcS9wKXZyhoMdA3z/hV6qwz7cjsL0
      tiybp44N8OOXzuN0yHz87dtoqS3jGw93lASgRGFS+51OWsLlVHp9PNzTyVI2S30gSNDlJr9c
      sAKgvbIKr8PJuqoash0niDz6ONg2ZR/+EILTSeq550EQcLavRlAUpGAQz84dyPX11Pz5n6EO
      DaB3Pohz41VY88+hvvwiUuMutM4fYCcmMfqeRFn7dgrKlb1sTbKLkx+AfLzg8/9PkBq2c35s
      iUxeZ2oxyXuuW49p2VSVeemfiJDOaaRzGookUl3mRTPMkgBc6Vi2zYtDAxwaGcKtKAScrmKF
      lrF4lLvWbWQulSSWy7KhupatdQ3FZ6XycgSnEywTQVHIdpzAzr9ep0VAaWgg9dzzZDo6CNx+
      O6H77sXV3gKTAoKkYy0OgJEv2PS1ZfXIMpDX34UQqMMYfA65/Xbk+h0YQy/CJcdujh0fxRg5
      fPHUt+U6tPXvZ6c7iapbLMYzPPTiOZyKxLuvW4ff4+Cp44MEvE5mltLc/9RZ9q5vLAnAlY5m
      GvRF5jHtQqqTlFqowGLZNrIosiJURnNZmMMjQwxHl2gMhqjxeEk9fRC1v5/Q++/DtWkTUiBA
      +tBhWCjkABVkueDXs5wTKPXMs/iuPYB+6n9ijBxCatiOsuEu9IHnce76dRAk9HOPIDXuRnD4
      0HsewU7Po2sPIzdfg7Lt19C7fgC2jdx6I46tH8Sx82OYkSF6p1L0LLk49LevshjPcu8NG9AM
      k/H5BIZp0TM8z3uvX09TTYjqsI9vPnqShViGtSsrSgJwpeOQZNZV1jCbTOF3Orl19VqmknE6
      Z6ZpDpcTcDr59oljRLIFp7PxeJRPltcQ/8EPAdCnpnFv24Y+M4P/5pvI19cVNrf797Pw5/8D
      +/W4AcFG7/lBIYhFdmHOdmMMvQCAbZlYC+ewtSzIbvSuH2Kn5wu/JWfQzz+KY/dvIpWvQgjU
      FU6DBYmJ+QTxTJi/emGIG7Y1k84V9gXTi0l2r62nfyKC26mwoibE5//uRaYWU1QE3XhcDhRZ
      pLk2VBKAKxEbsCwLy7YRBAGHLFHh9dJaXkGVz89wNMJUIsF4PMZQZJFY7mIpl7SqkjANkGUw
      DARFIfnoY4WvPxB897sIvONOsCz8t91K6plCWKL/jttR2quxlqpR2m/DSkyBURAOvfMHmFOn
      wLYwp04hrdh7+YD1LLlHPooVGUTwVeG685ssOVbwP773Kn6Pg3VNlZwbXWD76jpcThlsOHZ+
      kjv2reZte9voHp5narGg1kUSOW5pr8PjVJiJpEsCcCVimCY/vXCOeC7L2qoanu6/gGXbLKRT
      hN0eXpuaxLQLFpypZIKA00ly+Ute4w9Qs2496sd/HfXCBdw7dpB46EdFi0/u5CkcLS2kn38e
      W1UJ3fteXFu3IPldGOPHEdxh8s9+AcFbgdx8NbalIwYbMCcLkWBYJkr7baAmMaMjiP5axIp2
      9HOPAmCnF+h59SA/jmymrSFMQ2WAp44PksyqbGmr4b3Xr+e3//IgAONzCW7b1Up9RQCPUyGr
      6jgViaM9E6RzhdykJQG4AplPpzi1XGk9q+sXq7kAumXiuOSwSxIE7lm/mZlUAjMWY308hRCP
      o42Mok9P42h6PYHVFAgCcnUV8QceRF/O/KAOD1O3dQPaa/+A3vckzj2fQPCEC9FckyfAyGPX
      70Cs3YydmEaq3Yi86jrEqnXkn/9voOcwhl8s+PaYOqbkYU6oZS6W4apNK3E6JII+J6IosKml
      Csu2cTtlcqqBx6UQS+WYiaR45zVrSWRUGqsC/PjQ+ZIAXMmUe7ysDJURzWXZ3biS0dgSI9El
      6vxBttc1Uu318+xgHylVZXt9A6srKllbVc3SN/+GzKuvsrR2bbHqupVIEv7UJ7ANEyubxbNv
      H9H7v1Psy87m0Md6MPoPoqx7B1rXjxD8dUi1G9HPfq9wk57Bfec3sbMR1Fe+hnbqfoyxo1iL
      hT5YAsFfg9B6K48OeumZDfNrN7fz0tlRuocX8DgVPnr7Fl7rn+XV7kk2tlSzojpIc22Ir/+4
      g9lomqDXyR9+4CpWN5TTP7HES2dGsWy7dBJ8JSKLIl6Hk+GlCIl8nhtWrabGHyDgclHh9VLr
      D5BQ80SyGbK6js/ppNLrw1hcxJhfwLVpI/rEZKHEUF0ttqqRefUo5vw8+vQMckUFZqTgs+9o
      XYVnSzVSZWshJHH6NHZ6fjlYJQSCiNywA1tNgZbBnDqJrWWwZru41OwpiDJc9Tke6RUZnIrR
      VBPi/FjBtq+bFqmcRufQHLF0nkgiy2+/czeZnM7THYXge1U3CQc8qLqJIAi0NZSze119aQW4
      ErGBU1PjRHNZorkszw31MxaNopoGg5FFNtfW8+r4KKZlEcvleKSni7rVGrJpUv6J30IMhTCX
      opixGIE73078hw8VzZ36xATh3/pNvPt3YvT9DM+116O+8BmQFKSG3YUBiDJiWRPO/b+DudBL
      /vkvYnc9BJITx+7fRG69gewP7yu4NyxjiE66x5KsrAmxZ10D+zY2ktdMXuufpqmmDK9b4cJ4
      pPh+2bxGwOOgIughksjidSmcH13gJ0d6MS2bppoQf/zhq0sCcCUiANW+ABcWF5AEEackoZqF
      CRzP5ZiMxy+r5JIzdGYf+jH+M2fx7NmDPj+PPjoKokg2HEYK+Hm93IWgKIg+L47GRtSFKFIo
      hFS3BVvL4jzwGcymfWhnHkA78yDmbCdiaAV2arlmmKliTp3EsfGdyO23YvQ+AZYBipuhyjv5
      y6eHsSybe65ZyzcfPcliIstNO1rYtaaeZ08O43LIlAfcrKor469/cpKsqrN5VTWr6sNUhjw8
      +GwX5nKGurG5OINT0ZIKdCUiCAJhj4eZZIKGYJCb29agGgaWbbOltp7GUIjehdTKQIAAACAA
      SURBVLliwWqvw8HVZeUwM4OjuZn8a8tuybaNlcsReve7sfN5RK8XR9NKsi+/Sq6rF/87PoE5
      /SpiaEVB/YmNItVtwzj3CGhprOgogsuPlZiBZauTIDvRe5/AigwguAI4tn0YZddvMurYzIkL
      BUERBYGekQXSOY1UVqXj/BQnLkxjmhY3bG8hndPoGp4nndNIpFU+cvsWVlaHODM4x+xS4cRZ
      kUU0veQKcUVhA7FsBrfi4MjoMKOxKCICTWXlbK6tZyQW5djEKO0VVdzU2k7vwhwOSWKfqGAe
      /DFWJosZiyG4XEWXB9HjQZ+bQ1AUlBWNWNksxsICLCygjQ3C1CFQXNjZJczJU8jN1wAiUMj8
      ILVcj1S7FWPkMIKnHGPqJKgXfY9s2+aJYTc/fbWLqjIv779pI5mcTv/EEpphUuZ3MzC5VHy/
      ifkEZX5X8XlJEpiYT9A7tkhl0MOmVdUYhoXbJXPywnRJAK4kzkxP8nR/LwGnC6/DCYCFTTyX
      o3dhjthyKOTp6Snu2bCJhmAIv9NFxfMvkZ8s1PXNd3YRfOc95M+dA1nGjMWIf+/7xXMAFAW5
      pgZn+2rE7BkI1COvfRtaLo7cegNy201Ys92YkX7kxt2I7jKMyADyquuQGnYUBOAS9MgQnfOr
      SWRURFGgZ3ieo+cmkWWRD9+2he3ttXzj4Q4ujEeQJZH9GxsJ+90sJXMYpsXONXX8zWOnWExk
      EQS4flszH7tjG99/vhvTsksCcCUxEl0irWlkNJ33blqFJIrLWZ0befhctHifjc2pqQkm4jEE
      oAKL14sTCQ4F7zVX47/9NnJd3US+9vWLkx9A15Ery/FutLHjGZQt96G+9OdY6XkETzn5g5/D
      nD6zfMDVRv75P8bOx0EQUbZ+ALGsCWuu5/XecDbv567Va0AQWN1Yzmt9M6SyBZeH+ViaL33/
      VaYWk1SFPHzmPXs5eGKQU30z+FwOPvvevSTSeRYTBcG2bRicjGKYFg2VAQShdA5wRXFVUwvx
      fA6PorCptg5FkuicnWYgssjO+kbmUkk002RVuJy1VdVMJeI4JImyXbtwaQZWKoVcU0vsgQdx
      NDdj6/rlk38Zc2EY7bXHEOw8UuMurNgoAPr5n2JFClUcregw2unvFiY/FDI9zHbjuunP0M8+
      iJWcQW69gcnQAY4cG2T/hkZu2N5MNq8zNhcn4HGyEMswOlt4fiGeZXQ2xrFzUximRU41ONw5
      xtv2ri4ejAHIssiDz3YRS+cIep0lAbiSCLncLGUzjOTzPNXXy8nJcXTL4vz8HPes38R/ueo6
      RmNL9C0uMLS0xLUtraztG8T6i2+Q93qp+tzvM//F/46taWQ7TuDatOnn9iOWN+HY1I5tpFHW
      vh07PY8x+irKhntQj/xPsHQQRKS6rVixCTAKvkZi1VrEcDP21V/gbx8/xXbqOfzCeU4PzNI5
      OMeq+jDXbW3i2i0rKQ966Byc40TvdMFzVRJZWRPCqUgYy7WFywOFmIGP3LaVs4Oz2ED38Dwj
      M4UAeoHSCnBFkVLzpFQVy7YZi0XRl7/elm0Ty2UxbYtnBvqKVR77FufxX+il3jCwEgnUoeFi
      mVIsC7myslCW9PSZYh+C203wnnsQ1dcwJicwIwOYM51YixdQj/0Vypb7sKKjWPHx5bjf1kIB
      i+oNOLZ9EASJSCJNx4VZbEGkua6Ms4NzyJLIn373MKmsxjVbmvj0PTtpqglxy65VxFJ5NrZU
      ISDw2ffs4cXTY9SW+xicivKDF86hSCIfvGUToijQcX6qOFYbSmbQKwmPw4lLVnArMre3ryOe
      y5HM5wi53dzctobBpQhdczOXPaNXVbLB7cWOJ7BSqaL1RwoG8ezYjlxfj+jzIQUCOJrqCN6x
      A0dzPfnn/ht2ZABr/vxFnd7UkCrXIPiqMEePYCenC8UtVuzGedVnEBQX4/NxHny2m9qwj0/c
      tYPx+QTRZI4V1aGiuqPpBoos8ZWHjjE+n+CG7c089NJ5Dp4YYiGW4Qu/dgCf28F3nynUH7Bs
      m7lomvqKAOdGFy57P5ESVwwC0BAMkVJVOmeneffGLaytqsajKByfGCOjqW94RqqoQKqsxEqn
      UXsvYJsW4U/8FlJlBbF/fIDY399P7sRJXBs34t8Xwjz937EW+5Eq28HpR151HYK7rNCYKCMG
      6zGnXrusD3OmEzufwNZzHOwobGJPXJjmVN8MDz7bzeRCkrODc9SEfXhcCptWVaPpJoZhoekG
      h86OFWMB+iaWmJhPoMgioigU+1Akid3rGmiqCV5yTSytAFcaT/f1cmFxgelkglg+S/fcLElV
      ZTqZwLRsPA5HsYK7UxC4ZeUq/Bf6Cye/FA7RbF1D7e652Khpog4O4dq0HSnkRfCU49j5McRA
      PVJ5K/Ka2xEkB2K4GalyLVZ8DDtxMUW5WLkGOz2PduJvyQtuBtIByvwubtq5ile6xjEtm+oy
      H5//wFWkcxoT80kUSWJjSxV71jXQ1lBO1/A8lm3jcytsaK4mns4jiyKJjIrf42DPugbymkFd
      ZYDasI/W+nJ8HkdJAK40NNNkMhGn2u8np+skijG8IIki79m4hbDbQ63Xy56zPVQefhln00qs
      bBZBFPHs34c+PnFZljcADAOleR1KhYD2yl9gZ5fQT/8DxoWfIZW3IvhrCn8PvoCguAuV2y0T
      MViPY/N70U5/F2tpiBV+k/JtdzM0kySeynH7njYiiRwHNq1AlkS+91wPkUSWkZkYd+5vZ31L
      FfFUnjK/mzUrKrBteOyVvqI16FN37cTtVDh4YoiO81N0Dc0jCiJ3XtXOwROl5LhXHGurqkmr
      Kh6Hg+FopFjSCCDochF0uTjQ1IKwtMRcVw96IoHqcRN6//tQL/Th3rIFbWz857Ytut1IjbsQ
      R1/BSkwX/HgAc7arkMffKpQ6tXMx3Hd/G2PgWYyRI2hnHgRsDE81VsMBesaijM3FmVhIkFUN
      hqejTMzH2b22HnvZQ9S2bQYml/juM53MRzO4HDLvvX49z5wcKvqQTkdSPHNymK7huaIZFGBg
      aomHXjyHXsoK8auPbpr0LS6QN3TWVFbzk3NdXFgsxNs2lYVZV1XNfCqFz+nErSj8w+mThdjg
      5laca9rRhkcQvV4i3/gr7GyW9HPP496+HW14+LLavVJlGUp5DnPyJNb8OYRgI2JFO7aaRF5z
      B1ZsrBD1ZVuIFW3YuRja2e9d9PiU3bxU+bvMzrayfU0t/ZNRqsM+MvmCbq8bFgGvk+u2NnF2
      cJ7W+jIs22Y+WohVzmsGr3RPYFmXFz0dm4tfNvlfJ5LIsrWttiQAv+p0z83wk3PdmLbFuqoa
      BiIXrSBzqSSf2nMVLllhMhHj+52nMW2b2RQouRw3xuM421oRFKWQ5hCwMhmQRMo++AFSL7yA
      nc0h19URvPttSMocmE2IFW3Iq29BqlxL/vCX0E78Lc4D/wXXrV/Cio0ht92MOXv2MndnjByK
      lcUhy6xbWcnudQ20NYRxOWSSGRWPS+HWXa1MR1KcG1lkMZ5BkSVEUShO+tb6MCuqAhzuLKxQ
      1WVeDmxewcOHet/wf/G4FD5y25aSAPyq87p9Hwrpzp2yTFYvOC8rkkRO13ErDlTTxLykZHRG
      17EdDhBFRL//YoOCgFxZiRQO42pvRwyV4bvheqSyIMb5IXAFkVuuQ/TVoA88g52YLIRa9j6O
      VN6G3vcUxsgh5JVXgeIpCoHt8BMVqlANk58c6eXJ44O4nTJf+s0buXrzSnKqjm3DT1/tZyFe
      +OrbNty0o4WBySX8bgc37WihsSrAnnUNTCwkSWbyaLpJyOcinr641xFFgZbaMn744rmSAPyq
      s7WugalEgol4DFkU2FRTx1wqxUwqQV43eODsKRySTHM4TKXXy2ImgyyKbG5pxbMQI3vkZZBE
      HKtWgWXhWNWCsRgh8ehjhSAYUSwEwXz0fViZCCQm0U7+PYgycvtthcxuto3g8KJ2fAtMHRsw
      TB3nvk+j9z8DWooTnjs4MmSxZ72I21nI7S+JIk8eG+CF0yPYNnQOzl32bj6Pgw/duoVDZ0Z5
      4lg/X3noGLftbuWOvW081TFIz0hhtXPIEq31YTJ5DU030QyTl7vGUUvu0P95sIGMqjKXTrKU
      zRJdDlfUTBNJFHHJMkGXm3KPh6rl4naSKFLu8fKOdRv4/08cZXApwng8xu3t65i8EMO0bXTN
      BDTiMzl21q/gluZWPJksDU43kZdfxowVNsmOpibKP/FbGEtLzH3+j4oRYFgWudOnya6tRnEv
      ISjuwqSXFBxbP4DSfiva2e8Vcv6Y+sX3MfLI7beDqKAe/yYR0UEspRJJ5HjfjZsI+VxUhjw8
      1THI6wvTYiLLR27bwqGzYwC857r1GKbJE0f7mY8VVoXvP99DbbmvOPkBNMNk++pa6ir9PPBs
      d9GZDkquEG95kmqevoV5euZmmU0nyek6xs9xQHsdURBwSjJBl4s1ldVsqKnFqziK/jGaaXJm
      ZuoydQcKp6VjkQV2vXQEuntIb90ConSxXb8fwePBHBq+OPmLD1voF14E8QSum/9fXHd8FaPv
      afS+p5BX7sOc6ABBQqxah7XQC6KCsuZtoGcRPGVIlWu4YesWnM0e9m5opH8ywiNHLgA2a1dW
      Ii3r+ZtWVbN/4wo2NFfx/OkRjp2bZF1TJap+cTNumBaCILyeWbTI+bFFnj4xeNnkh5IAvGWJ
      5bIcGx/j7MwUaU3F/j8/AhQmcs7QyaV15tIpjk6MsjJURmt5BSlNZXVFFX3LVqB/ip5OkxsY
      wJlOo0/PUPb+95E+fARbzWPnVeIPPIh71y5En++yVOeCw4Fz+x0wlwdRwoqOLmd9s7Ezi8ir
      bwVsHJvvxTY0kBT0zh+S+f57EBxe2PtZvvVKkt7xEZJZjYVYhlhq2UFOFPjjD1/DI4d6kUWR
      yYUETx4b5MXTI9jAK90TrGuqpKN3Csuy2bOunqqQl5t2tvD8qcI9LodM30Sk+BG4lJIAvMXQ
      TZPjE2McHh0io70xBfi/p72hpQiiILC6opKN1bWkNZWxWPQN9/rKy6l45z3oJ04iOp1kT72G
      //bbiH/v+6h9BTfmfE8PoQ9+gPiDD2KlMwgOB4G770J2R9Bmu9AsA6l2C8Xvr23i2PExck/8
      NtmhFxEr21HW3bVc5tTG1tJEOx5kbP6d5FSTvokI12xeyas9E2DD1rYajvZM0DO6AKPQNxHB
      suziByGezrNvfQP3Xr+eifkEDz7XzR98+3mqQl7+8ANXkcnrfPdgJ3ntjaZQKAnAWwbbtonm
      sjzc08noz5mc/7dYtk3f4gJjsZe5YdVqytzuy1IeOmWZG1pXE6qowty4kfk/+VPMpSW0sTGM
      S8oiGQsLOFpaqP2Lv0CfmUGfnCTf04PkrkdefStS0/5Cxrd8Ais2hmPvp9FOfLuY69Oa68GQ
      HFyqoFR4Re69tp3jgzG2tNawb0Mjfo+TnxzpJZrMMRO5uNrkdYPqMh+z0cI1SRR45tQw7Y3l
      JDNqcS8wHUnROTRPNJklkXmjj9PrlATgLYBt24zGony/8zXSv4Cv/r9E3jB4qr+XrbX1bKh2
      Mp9KEXS72d24ksZgCChUblFqazATCVzr1qJeEIqZ3qSKCrSBAbInT6I0NJDv7kafnEKfmabs
      9nrM8WMIDh/m2KvY+TjqC3+C4Ku+bAxSzUYEZwBj/Cim7GWy5i62bWjlaP9JvvP0WZ7qGKC+
      IsDgVJTx+QT3XL2GkZkYhmkR9LiQRAG3Q2Z9cxWGadE5NMe5kQXaG8sv66d/conh6X/5YyLY
      tv2vVS9L/AdgL3+Zf9h1ppia5JfF9vpG7l63EUWS3vCblc+TPnSI/JlObF1HKgshBoO4N25g
      8evfAKMQ1C4GAtj5HK5mBVdVH6gxxIq2QnG7ZVw3/znayb/DyiwiuIKIwQZQ3ChtN3M42si3
      nhmksTLIUjJLJl+wFF27pYmO3ilqy3188SPXohsmfRNLfPPRk0V15sCmFexaW8/f/ayQpeLW
      3a0c7BhC001qyn2YpsV0JPWGd7uUkjv0m8xYLMpD3b/8yQ8Xg+QvtSrZto2lqth5lfQzz5Hv
      6UHt60NwuSj70K8h+nwXXSBsG98N11P9xc/haU0gVbUj1m5GrN0MYkG5EFwhxHATjn2fxn37
      VwrVHqdOYY6+jNb1QzxeD36Pk5pyH1taa/C6FFrqyvj427fx1U/exDWbV/LlHxzl8Vf6SGbU
      y3T5qcUk29pq+YP79uNxKjx8qJd0TmPX2np+5127mYteXpPs51FSgd5ElrIZHuo+Q/6fmhV/
      SdhAx+Q4YY+Xq1Y2IwgC2sgo8R/8AKWhAesST1ErXdCtHc3NePbuJX/uPHJ1Nd4DB5B8wKZ3
      Y/QfxJrtKuj+234N29QQvFVkH/sEqEkETzlIzosD0HPsaa/CED08ebyfvesbCXid9E8u8fgr
      fVy7pYkHnytkb7gwtsjNO1dRGfKwGM8iCgJtDWEcisT50YWi7g9woneKkM9VTIL1L1ESgDcJ
      zTR57HwP8Usm2ZuBZdu8ODxAfSBIS7gcbWAA9Xwvtqbhu/YaMkePgmXjv/nGwgOyjP+WW1Dq
      63Fv24pcU41x/nG0sw9APlm4J59A8NciukMYwy+BWrhuZ5cQqzeArGCn5hH8tZCNsBjXGZiM
      klMNFuNZ8prByEyMxqpgMTmXTeHk97fv2UX3yAJ9ExH6JpYK6o/wxnfqm4j8q96/FA/wJtEx
      Oc6JyfF/tX3/PxLDsohmM6yvrsVVXY3o8eDZvh3fTTdi5/Los7PoU1M421pRey8Q+fo3yHf3
      kOvuwdXeijX3CnZ8ErGqHSyjkAoxF0M7/i0EX/UlwS8Cjm0fQNnyfozB57CXBjGGD1G/+Ua8
      4Vq2ra5ldDZGOqfhdSm857p1pLIaOVUn6HESTeXpHJqjzO9maCrKdCTFyEyMne11zEXTRa/P
      He11JDJ5kv/E+uMLBrlxZzPtFU40JGTDKK0AbwaxXI6XR4eLX7e3AuPxGGdnpthb34idz5N4
      5Cdo4+OkXzqElUhgzM6SfPynWKl0seyRubhI9uQxFOssVmwM144PI+75FGKwHmP6DFZ0FKmx
      kBDXSkwhVbYjNV2NNX+uWODaziziTQ2Qzq3maM8kW1pruHG7h6DXybd/eppEJs/e9Q0sxLPF
      gPbR2XihEgzgdsrsWFPHnvUNnLowjSSJ3LijpVgk4yIiG1aF6TozSMQQaKivYEWdoyQAbwav
      TU0UMy+8VbBsmxNT46x3ucl2nMBYWCgUzrh0fyIISBWXmBpFEdEFkm8tyvq7QHaRP/g5pKb9
      mLNdWAu9aIv9OK/+LFLNJtRj3yL/5O8ieCvA4SvkB3WVM2PXc7RnkmgqR8Dn5GN3bOVvnzhd
      DGBfSuSoCHkuG+vte9ooD7hJZlS6h+fZubaesfkEY3NxyoMetEvcIwpjVfDaKjNZExswkakO
      CiUB+GWTUlXOzk79n298E5hPpRhU87RetZ/cmTP4b7wBgNSLLyEoCt79+5Bra7FSKbSJSRxN
      K3GtqkTv+mkhn09yFis6AoKA9XoVd9vEnDqNtTSCOdlRuBafQNl8H2L5Ko7NB/je81Gqyrx4
      XIX6Xk8eGyCrXnScU+RCysO5aBpNN6kKedjSWk19RYA/uv8lphdTdPROMTYXRzcsjp2bwKFI
      l5/+WjppwUWDT2ZRE5DR6RmMlfYAv2wuLM7z2vTkW0L3/3mYwPa9+xB0HSuTxbN3D87WVrIn
      TpA93oGtaviuv57cqVMYs7OYWfF/t/fe0XFdZ4Ln775UuVBAFVDIkQQIkmCOkhiUg5Ul291y
      7umWe6Yn7J7pNPbuTp/ZDtNru6fd0zPttnu6bUu2bElryVagMnMQmACQAEEQicixEAqVX9g/
      HgkKEiVSIkVpqfqdo6Piq/fue4Vzv3e/+0VcqzdinN2NuvILmHMjSL5CMA2s+CRICtq6b2CO
      tmFO9Z67i4VScwuONV9lUnfTPTzN1+5aiVNT2Xm8h6bOUYpDPkqCPhRZIuB1Esxxc8vqKvL8
      LnpHpjncPsTwZJTJmTjRRJqKcA4BrxOPU+PhrfV09E++ywNsMRUzWL+igppclZGpOPF4OusI
      u5YYpsmPDh+iZ2ryk36U90WVJB4bn8H70stgmjjXrEb2eIjt3Qdwrgp0uZ0SCSAEgS88iOY7
      hZWK2jE+loFcshbHLf8H6YP/A2OiA+dtf4Z++mXMiU7MRATScwh/KZ2L/z1/v3Mcj1NlQ30J
      v9p9ioxh8pU7VnDfDbV895cHOXxqEAsozPOiKhL9Y7ZVSZIEm5aWcqR9CEkSSEIgy4La0iB+
      j2M+bPqDyDrCriFTiTgTsUs7Zz5JMqbJoNeF0DQAtPJyXBs3Ihzn/l1bi1ZTfeECWUbO9WBX
      mnWAYp8nFTbYX5esRcopxUrOgGkiV9yAUN1Y8QjmSAsdx/bO1/gsK/Dz5793C3/y2I3MxFI8
      9eZJLOtC4JsA8gOeC7eWBM2dI6R1g2RaJ57KEI2nOdoxTCR6eXus7ApwDTkzMc4/H337U2X9
      uRgrw0U8GgwTb2xEHxzEuXIljkU1JE6ctOsDCQkzEcdKpnCtX4cjd5jU3r9GCtXiuPlbYBqk
      j/6LXQU6rxrnnX9O/Jdfsev+C9k2jUaHwOFnbtt3+NkJwen+SaqLc3l0az37TvTx/D47+vSm
      hnIURWJoIookwO9xkkxnMEyL4pCPQ60D74nxB1heVcDQZJTI7AcLQnYFuIZEEvFP/eQHmEmn
      MDxuYrt3Ez94iMgPf4SZTBJ96SVie/YS270bY2qKnEcfJtXRQax5ErlsK8IZINP8FOZMH8Zw
      M2TimKMn7WoQ55teWAZKzXZc930f57Y/JlxayVfvXIFpWhxqHeCJ11qYS17YAHvdGv/2ofUU
      5npo75uk8dQgum7SUBWmpWvsff+ewRwXt6ypuuRvzVqBriGzqYt7facOH0WsX0vgMsYwImfY
      9cJptjx2D5p6me+vidOcHPazvKHosk5PZDJkDAPOhxJYFpmhYYzJC5GVmYFBJv/xh+iDdi1R
      +UsPIo3/M9ZAI+bMEFJeDeZIi10eJVBhB8hNdiEcfsxIF4kTz9opkpKCVns/Bd51RGYFpQV+
      HtlaD0BbzxhnR6Z58rWWBUFtU3NJNtQXU1rgZ9fxHo6cHl7w/JKw9wGVhQHeOtpNJPr+3vas
      FegacmpsdEEhqvMkB4cQJcU4LYvEWC8tr+0iJQfwaklaX32NyKxMXkkQCRht6yE/rBDVwvj1
      YdobT9B7rJ2cqipSg6doeWMv0bSDHI/OqTfeZCblINerMxZ1EvSmOLnjNWYybnJcCZpefJVZ
      3U0ovFD0HIrC+urFeCvKsXQdV0MDjtpFJJtb5ovjamVlSD4/xvg4CIFrxRKkTAdWKopStQXX
      nX+Bsvg2zKHjpBt/hJVJ4NjyH5FCi9FbnwfrfECdiTRxihtXLWbR+tto651gcCLKw1vqeWZX
      G6NTMU73TZLnd5HM2PnPm5aW8MbRHl440MH4dJxcnxPTtBBC4HGqVBYFeO1wN3tbzrKsqoDh
      ybn3tbplV4BryLuLNr33hDTdJ86y7HP3MHJwN8NGEWnhIxwOICwAnZlIhKKGanpPdFBSlyKT
      t5RlNX2M9Y6TnIiy6nM3c+pwLwOHGhkbM8kM7yN86yoAune9ydSsSfy1neTcW0vGFSYQ8mGx
      MJzG3nhadtXnnByir75CdMcOHLW1uNatxZybQ62oAED2+9CqqtBC4+izKs7b/jOZjtdI7fsb
      1PoHMIZb7EEzCbtCXHRhZYfzKAN7OTW5ksZTtv+gJOSbT2G0gNL8HO7asIiCXA+jkRivNNpW
      qIxhUhzy8Y27V9HaO05x0MdvDtj7h4xuEvA6uWVNJW8e7bmoEGQF4BqiKRf/c1tkiI2NISsK
      imQSnZggrcuECkpxCJnhlqN4w3fjjJ9lcjxG6ngXU9MZjNowvmAesjqGPCdsZ8/EBOlUBtUb
      ovqmOvweFbeIQBRUby6L6pfjVkD1a5Rbw5xtbCb44C0LJoIiyUiGQWzXbmJ79s6rQqnOTlzr
      1zJ7yPYJAKgVFfgffAA1nIfkz8cYOobRsxsDkMs3ITwhrOiwnRQfqkWfunhZRfQU1YV+/O4J
      fB6NhuowWxrKOXZmBIcq03hqgF1NveT5nGxdWYEQzFeLcKgyrzR28fqRLiwLgjlufG67EIDL
      oVCY551Prnk3WRXoGjI0O8OZyfH3HJc0naETHcTSCjXLyxk+1UlO3SoCHovx7rP4qpYSDPkw
      0lCwfDll9XUU5Ocg5eThcLtxOFRUtwem++g83g7+IurWLWO6+zQJ3UGgKIzT6yVcWcR4+ykS
      ppO8oMbomQFC9csIvMO0CJDncrE2VAATE2R6z86rPQhBquPMfJU4wI4TGp/Ataqe1L7vIDQv
      ViqKcOchBxchl65H8hcjBcqQC+qx0tEFyTLnSRXfwAsjZVQW5VJVGOCF/R0sKg3yu/euoaIw
      wJ7mPgASaZ2llQUU5nmZiSUpzPNyz6bFPLe3fT78IZ3ReXhrPZ2DEVq6xjh6eph4KoNLUzAM
      a8FKkF0BriFBt+eixx35VSy/9YLFonZrwfznmpu2zH9Wc/JQz312F9pphrbVPQePppMIBAlV
      eylctgTZ7aT6hgvX5noAXCzasnX+WN32C/d5Jz6HE00IdCHw3XUX0ddfB0lCq6ok0Xj4Pedn
      +vowUwJ12UNkTj6L4+ZvYQwdI7Xzr0B1oa37HTInnkFvfwkpVItUUI851g7nlC+poB6x+usM
      PdeDz2Wwt7+PtG7QNTzFlhXlFOZ58XsczMZSuBwK1UUBKM5lUUkem5eXokgSTk2Z7xEgCcGL
      BxeWQMnoJpIQ3LSijBNdY0ydqxSXFYBrSMDpxKkoH08CjKQQqm0gdBWGyvd6kb1eEILY24eQ
      fD5yv/wYKMpFBQBVQaiq3Q84OQuWiTiXEYapo3fvmq8Ubc2N4dj+pxhDq9afngAAIABJREFU
      xzFn+iE5i1J/L4YvH7djgFyfE7/HwcRMHJem8NSbJxkcn6WuLEh1cS41xbkcbh/ijaPdCAST
      M3G+fOcKHtlWz6/2nEJVZJZWhHjjaM97HjOVMaguzuOBG5fws9dP0No7nhWAa0nQ7cHvcJLU
      P93e4MpAHubMDNFXXsWYsBNL5nbuIu/xx3EsqZsvkQKAEHasUONh1HAp6rJHSR/47zi2/TEO
      VxAUzc4NGDsFlmGvAKHFmJFuzDOvYSWmMMbaSHQdQTZvRwgPqxYVMjETZ9OyUn7wa7ubzHQs
      yeP3rcWhyTzxWguWZbdzbekeY29zHzuP9yIJwa1rq6gru7gAAAyOz9I5MMnQZBRJyq4A1xSH
      qlIWyGXsUxwO4dccBLq6mRscwnpHyyQzGiW2cydabS0oCvroGEJRcK1eRbqnh+mf/BThcBB4
      oB6RSYDiwMrEyTT/HOHwoW3+A4QrB6VqG8Lhwxg8ipU4ZxK2TNwDb/FHdz7Acz1Ont93Gk2R
      +fz2pfOqT57PxcD4LB39k8jnKr8JIagszOGpN0/O5/8+/VYrf/MHdxLKcTMxE1/w2yRJsP9k
      P/F3ONqyAnANEcDycCFNQ4PzFZs/bZRKMtbTzzIzOop740bSPd3IublkhoZJtvwEAGdDAwXf
      /k9YiQTC6WLi+98HwEqlEL46xNwB0kf+BWPgMKRjWIBVsBSt4fNYRhJLT2Gl3lWtwTLxWFHc
      loLAwrIsDrUNsH5JMRXhHArzfHz/2UNMz6VQZYl7Ni9meVUBpfn+BY6wVMYgYxg8sq2en79x
      Yn4f4HGqlIcDnDq70AiRFYBrTFVukJDHw+jcB5fr+CSQhGDNosV4Vq8i3dePUhgmefIkalkZ
      xpnO+fNSHR3M/uo5kq1tCKcDrbISoWmoxcU4V60jHXvNPlFc8FQbA4eJ/eK3wcigVG1BLlmL
      OdEx/73whsl0vMItQ+2ECmrY43mUFw50IAR86fYVGIbJ9Jy9ImUME0W2yyQOT0ZpqC5g/4l+
      TMtiSUWQn77STM/INJZll1dZWplPXVmQA639WQH4pHGpKutLy3mpvfVTlxNQ6s9hcbgIx5ce
      wzIMoi++ZNcANU27Hug7+oLF9u6bN8QLVSP/j/4QOccPVgaMNMZoK1Jupb0ZVpzz3WEAMief
      w7H1j9A2/Wv03n1I7hBK3d2kdv1XnKkIGxij2dgOyFgWTEeTbF9VQXHIx9BElByPg0OtA4xO
      xRDA9tWV/OdvbMMwLY62D/HSoQtm1jMDkzx+3xo8Ls3W+4VYED+UFYBPgDXFpbzdf5bxT9Fe
      QBaCdaXlHBseYGh2lopALivvuhMhy6R7etAqK7B0A8nlxFG/hOknfjZ/rZVJk+nvY/b5Yygh
      B2L0lF0GRfPiuve/YYy3k+g7eOFmloGVmEK74Q/Q1n7DriFkGWROPIMxEMHyFrJ5dQNR5xSq
      IuNzazy9s43fumU5bqeKz6Xxt8/ajjgLGJ6cY0l5CKem8PrhrgW/KxpPMx1LEUtmCOd5WLko
      zPF39BnIhkN/QjQNDfLLE8c/NdGhdaEC8txuDvX12tZ5IbijuIwl//JT9CFbx/bffx/+Rx4m
      c7aP6ad+QerUKVBV/PffR+J4E5nubpAEgc+VobgiKLV3YAw1I/mLyZz8le0RBlBcuO7/O5SK
      zQuewUrOYIyd4pmmBM8dneDODYvYurKcP/nBG/Phz//1m7ficzn4yStN/Ga/rSLdd0MtpmU7
      wDRV4Tf7L1iplpQHWVSSx5vHesCCVYsLKczz0t43garI2RXgk2JFUTGtYyO0vKsz+yeBT3Ow
      rbqGX7ednFfLLMuio7eH6qnp+Zj5dH8/E9/9G5JtbUheL3m//ziOJUuQPB4Sh8/5B0wLoeUi
      F1diDB5Db/sNSArOu/8avWsnZqQLKbcaM9JFOtKNcOUiBRchBasRzhyU8k2kWptIZUYZnowy
      l8jMF7jK6AYd/RH2NJ+lOOjlLx+/FYcq84NfH+F0v51ll+tz8vW7VtLSNUZR0MvSyny+98uD
      8y+aQ20DfOtLW7ixoYzf7O/ICsAnhSQEDy1rYCQ6+4maRRVJ4t4lyyjLCeBS1QXfOYsKca9b
      S/LAQYSi4Fi8mJmnnwHsEIjMwCCeG24gMzSE/777iB89iqO6GkeViTl+EqF5bfVG82D0N2IM
      HsGKjmCOnUI//dKCewlPPkrd3WhrvsKX72ggGk/zxtFuekemeez2BroHI9y0ooJnd7XS3mdP
      9pJ8P7WlwQUlEKeiSTwuDbdTJZnRGY7MLVhlLQuaukbY19LHTCyVFYBPEreq8dU16/lh48H3
      zRX4OBEIloeLCLhcWBbcsaiOZ042MZtM4ne6uG3xEvJXryciBJmRUdSyMoTLiZVIgiwh+3yM
      fee7pE6cRDgc5H7j63i2bQVTJ7XHToJXlz1Epv1lMi2//MBnsWLjZI79lMzJ59DWfZ1Mqg6w
      dXifSyOtG4xG5pAlez0SQjATSzE0GSXP75pPgA94nfx4R9N8kd2g30XQ72LyXGbY+VIq58/P
      BsN9wng0jeq8IKcnxkhdwxqhkhBoiszg7AxHBvs5Oz3FxrIKSnJyGJmbw6WouFWV/FicmSd+
      hjE6imXoBH7riyAE3ptvRs7LI/rCi/aAhoExNYV7VT2pnf8FtWorxtgp9I5XwfwQJd+NNEZ/
      I+XqBGbJRravq+Ngaz/NnaMMjM/ylTtW4HFpVBYGeK2xi9fObXpvWlHO0ooQd2xYxO6mCxGn
      qiLzjbtXMRtLURbO4ffvX0sqo9PSZdccyqZEfgoo8efwO2s3UeTzX5P7OWSFdSVlCwSuOzLJ
      rp5Onj3ZzNDsDH0zU/z61EmOxKKolZVIPh+y3090x6tY6TSu1auRvB6QLkwhocoYw8dAdZE6
      /E8YZ/fDRzT25k838jvqU9y1ppiG6jA+t0ZNcS6aKnNTQzkFAQ+zcfstPj2XpKGqgBU1heR6
      nRSHLrR1Ded62PF2J21nxznRPcrp/klubCinNN8+J7sCfAoQQuB1OFh2rn3ReGzuY7MO5Xu8
      fHHFakpzAhwZ7F/wXcYwiCQWhg+kgRsfehjvuWJZyaPH7DRIRca9cSPm9DTmbBQlPx//fbdi
      tP8TpO1c4I86+c9jzQ5CKkrD9oe4qaGCglwPf/XkPnYe76Ug18PQRBTdMPE4VbqGpnj50Bl2
      N/Vy3+Zallbms7a2iGWV+bz8tu3EM02LqWiSzUtL0VSZjJ5tk/qpwudw8MjylSzJL2Bndycj
      0dmr5ixzqyprS8rYWlWDT3OQNgyq84J0R+wNZcjtYUl+mNG56IJ7OlUFfXAIc3gIyem0D0oS
      xtQUk3/33zFTKfwPPoB78wbM0SNY7kdJ7f3evNPrSsm0PodSeyeFZRvoG5vBMM35pJf1S4qJ
      JzNsWlbKv7zcBIBhWnQMTHLPpsXMxJI4VQVFluazy1IZne/84sB8ckxWAD5lKJLEyqISaoIh
      TowMc3igj9G56Ae2Rv0g/A4n9QVhNpZVUOzzI4Sd/CgJu2m2YZqUB3JZV1KGLEl0RiYYnJnG
      wt6f3JCTx9T3/hZjagrPli0EvvYVhCQTf7uRVFsbgK0SLS0hffTHdi+wTPwDnuhDYqRJv/2P
      6PkrmJ5Lsm1VJRWFOTS2DdLaaxfUemRbPWUFfk73TyIJO0T6z3+6B8O0WF6Vz3031PL2qUF8
      Lo2CXA97W/rmh88KwKcUr+Zgc3klq4pK6J+ZonV0lP6ZKaYSceKZzPtep0gSOU4XYa+XJflh
      FgVD5LrcSOJC1q9lWRzo62HH6XYsLJyKwnhsjl3dncQyaZYWFBJwusiYBrPJBE7DsKMvnQ6U
      ggL0kVGsdz5Deo7U3u8iFy8n09b13oe6QozhFk6+vZv/+doURUEfD9xUx+uHuwGIJTO0nZ1g
      cWkeoYCbzcvKeONIN4Y5DUDf6Cxfu2sVPrcDWRYLIkEhKwCfelyqSm2ogMWhAlJ6hplkkmgq
      RSQeI5HJkDIMFEnCoSgEnE4CThc+hxOvw7Fg0oM98WeSSRyKwpmJCc4nB/ZNTzMZjzMRt7us
      uFWNeCZNz1SEw8D2Bz7HjZoTtayM8b/4Kyxdx7lyBWpZKSDwP3gvqrsfc3bgQv2fq4meID/W
      Rm3pckzLYv+JPpaUh1AUiaDfxatvdzI+E8fj0vjaXSuJxlK0dI9imhaVRQFeP9LF60e6wYKl
      lflUhHOyKtD/3xCAU1FxelXCXh8EP1zul2VZvN55mqODA7g1jbKcHKSIHRhWFgiQMYx5AUgZ
      OtPnWqhaQH9+CPe6jZjj4/NWHzMaxZyLIXk8KPm56C0/xoq9N9/5ahE2+viTx77JXz+1n6d3
      trG4NI9/ff86hBD85ZN7AYgl0oxGYswl0qxZbDfcWL24kO/98uB8Av1sPMW/e3gjLV2jhHJc
      WQH4rBBJxNl/toekrjOdTBD2evlX6zaSyGSozgsxHpvjjc4OLCy2Vy3iyGA/TcODSEKwLFyI
      JARSQQEF3/4W+tgY0Zd3YExNYUxNkTxxClftnWRanv7Ynt+KDuN1a/jddo+x8ek43/3lAZya
      wublZXQNRlhakU/jqcH5MOol5UEK87ysrSuie8hOvqkpzuU3+9tp650g1+/MCsBnBVWW572o
      YO8xwl4/fdNTHOjrYTIWO2d6tTg62I9X09hQWk5tKJ/6gsL5zbOjdjFaTTXp3l7S3d0IpxPJ
      7CJ94GUs/f0bUl8xegpNUfg3D66no2eQ1jO9/OaYna5554ZFYFmEAm7OnIsJsiwYn4nzwoEO
      kmmd//jFzXhdGgMTs/zTi8ewLIhEE1kB+Kzg0xw8vHQFB/p6SWTSjM3N8d/27yKRybyvz0ES
      gtbREU6OjrC5vJKKQC5CCIQsk/P5R9GqqxCahlZgktpzxM7+molddKwrRvMgBOT5XayRmghH
      nmGi7ndxevz0jc7w2uEuJCH437+wiXgqg6bILC7J438+fwTTsvjqnSu4acVSBidmeefPzQrA
      ZwQhBBW5ubSMDNE7NclQdPaS15iWRSyTpml4kJOjwzSEi7inbil+pxNjfJzpJ36GlcmQc3s5
      RLqR/CUfW5KPFCif/yyXrKWwaB9/YL6AXLiCXZn1SOe6x3cORnA5VL548zIMy8KhyWR0k9lY
      mr979m2cDoWyAj/9Y7O4nWpWAD4LWJbF2ekpftFyjKnER+tNppsmx4cH6ZmK8MUVqykcHsGY
      svVqI+5EK2xA5FVhTvfCVfdiC+SilQBYyVlSb/wZxqDdHV7vfoutVdupffzbzCThL57YO+/0
      Cud6qCsLcdu6al480EF73wRCwL99aAO6YXKwdSArANc7lmXRPj521RpyTycT/Pjo23yhbikl
      99+HMTaGVrcC8/RumBkEzTffF/iq4fChlNvJM/rZ/fOT/zxmzy4q1n2deEkDQb+LiZk4um7y
      zC7bUVcc8iFJF0zChmXx4sEO+sdms8Fw1zOWZdE7HeHpE01XtRhXyjB49kw7kZu3YkTnmPj7
      H6HHwoC5IBH+aqFUbwdJRh84gjVz8QaDJ9u7+N7TB3lkWz21ZUHSukGez4XHqbKsKp/f/dwa
      tq+q5Ct3rGRZZf68Qyy7AlzHzKZSPN92gnjmQ4QjXyaJTIbnT7XyoKrg8PhQVzwCA/8LYRpY
      koQVj1x6kMvB4UfOryP25MOQjoEzByQVzAseXeEr5MBYDk1nRpidS9IzPI1DU/jD39rM+HSc
      2tIgA+OzTM8l8bhU/B4H21ZVsONQZ1YArldMy2JPTxcj0Y+v/MpYOkXLnbfyueKvo+bnY83U
      ktz9HTvpPRUD4wrNopKCY/O/Qe/dZ09+gOQMcvlmrOgIViKC8IZxbP1D7nUuRfV1sWVFBS3d
      oyiyxIGTA7x1rIcXQx0ossTZ0RmaOkcI+t2Mz8QJBTxZAbheGZ2LXpN+xC2RCTbULKZEkrAc
      fqzkNELzIYcWYYy1X2iE8WERMurK30apu9tutzR/XEJd8jmUmluw4hMIbxiheSgHfu++tQAs
      qQihGyb/z1P7AUimdXwe24GmKhLNnSM0d40CWRXousSyLJqGBomlr77q827imQzHhwYo9vkx
      ExZm4AvImUMYnS8g19yC0Xfow0eHqi60DY8jHD4Sz/0+SvV25OI1mNFh5FAtaB7STT/Hmh3E
      yiQRmgcpt9zuSJlbaatNksRv39pAKMdN38gMI1NzbKgvYfXiQizLorV3HN0ws2VRrkfi6TQ/
      PHyQ4cuw9V8Nwl4v39xwI/qOV5h56hcEPn8ras4Y5vBhhCvP7gkw3rFAb78okoJUUI8UXIRc
      sgb9zOsYPXtQVz2Gtuox0kd/jN7fiDUzePGVRVKRgtWoDZ9HWnwXP93VQ0f/JImUTu/INFtX
      ljM4EaWuLERFOIfx6VhWAK5HBmam+UHjAbvR3TVAlWR+b8NmSlIZZp59ltTpDuSAA3d5O8KK
      IlQ3cul69M43QPPYRXGNc8KgOBGqC+HNRzgDSKFaMkd/DJaJsuRe5IJ6kDUyTT97R6f5SyGg
      YDlPpe+jzyjk4a31jETmSKQyPPFqC9XFuZQW+OkcjGRVoOuRsdjceyZ/fLSP0f5JcmvqyAm4
      eVek9AcyNzGBJxh632sypsH4XJSK0nLkYBB9bAx9DLRF9yGlmlDUMYzJTiw9aasoloVStQVk
      DaG6yZx4BqF6MHr32Q21z2eTWQbIKqn9f3thE3xZWDB2gkedI0hb/oRArd0dM5ZIE/A6cTs1
      fvjCUSKz2Vig65JI/F06tz5F17GzFNQWMjcxSU7A/T5Xxhk4OU7p8grifX0kA7nk+X0MnGhm
      8bZbkT9AaCbP5RK7N6wndboDye8D2Y3p3IDj9pvRB88ggl1Ycz1IkmZXjjYNtPX/CuEvQV3x
      BdRlDyF8haR2/iVC8yLllJLa872PbE1Sk+OIA3+NESxCLlqJx6Vx69pqdMOkc2CSps7RrAp0
      PfJSeyt7ersvHDATnHrlTXRXkKqN6zDHuzhzpA01XMuSNWFO7dhD2hGgpMrH8R1HKFmzEjHQ
      xZhhUX/rA8x1HaVmTQNtew+i46Hu9tvwOhbe84aKKh6oXw6WhZlMYsYTxBvfJnH4CPromN1r
      wAIkkP0etAo/7jUrcG66H/QUaG6EkEgd+gfSx5/Eeev/RerN/xsrOX3Ffw+pYCnuh/8R4cqd
      P2YYJsmMnl0BrkfEu3UVyUXd7bcxNzFK7+Em9JETJA0Pqf5hkkvcpE2YHekh3HAPS7YGqNlQ
      y9yZMEWhEAW5Adq7INJymPGpBC4RIzaXxuvQFt7i3P8tyyLe2Mjs879GHxm9aFyQOTtHZmCU
      RNMQ7o4oOY88jOywR5ByypDzl5Bpff6qTH4Ac7yddNuvcaz9+vwxWZbwyFo2FOJ6xKUunJyk
      p2l/czedR05gyQ4KykuRnR78hbmYiSg6Gr5gLsKSSQ+1cvLgSXDodL2xk5Fh25LkqyrHoWh4
      8sM4LqILuVUNM5Vi+mc/J/JP/4w+PHLJoDgzFmPu1dcY/873yAzbhXOVJffgvOXbtop0tbBM
      9JO/utCR5h1kVaDrkBMjwzzZdOTCActCT6cwDAvF6UTCJJNMIWQVRZXJpJIIWUFWVCw9jWEK
      VE1BT6UQqgOBiSTL6MkkFgLF+d58499uWEXF7n1EX3xxvq/wh0GrqiL/T/8YOSeHdPMvSb31
      51xpXaEFyCquB/8BpXzTgsPZFeA6JN/jwaW8o9CtECgOJw63C1kSCElGc7tRHSpCktBcblRN
      Q5IEsuZAc2oISUJ1uVAUCVlREEKgulxoLud7Jr9TUfC2niK6Y8dHmvwA6Z4epp54EkvXMc4e
      4KpOfgAjg9Hf+J7DWQG4Dslzuynweq/Z/YIItDfegsyVRZzGDx4i1XEGc+riHR6vlIuNmxWA
      6xBNVmgoLL5m96uLTEN//6VPvBSGwdzrr2PFZy597kfg3Y35LMvKCsD1SkO4iKD7/ez9V49c
      p4uageGrlgWWbG3D1D+mDpryBdutlUmQaf5FVgCuV3JcLm4sr36Pvn41kYRgU0EYz/jEVRvT
      nJ0F6eOpki35i2w/xcwAyR1/SmrXX2UF4HpFAOtKy6gLFXxs91gczGd9fiHWuz3PV4hlaJc+
      6UNj5xUboydJ/ObfoXe9CZaZFYDrGYeicF/9Moo/hr4DhV4fDyxdjkNWuNoWG+FwYovwVRzT
      EwLTIPHyH2FOXGijmhWA65yg28MXV6ym2H/1hKDQ5+O3Vq4h6PYgOTSEy3XVxgaQK7eDK3BV
      xxTeAlKNP3xPTnFWAD4DFPr8fHX1epYXFF7Re1UAS/PDfG31hvluNsLlQi26ehYn4Xaj1mxD
      zl/OVVsFFAdWdBRruu89X2U9wZ8h0rrO8eFB9vR0zRfCvVyCbjcNhcXcWFGF3+G0Y34yGQzL
      RGo8TOR//MNVeUbJ70dyOlF8k7grhrFiI5e+6IMQEuJcquZFv84KwGcLC5hLJWkbG+XEyBCD
      szPv22/ApaqU+HNYHi6idypCd2QSv8PB5xtWMZ1I8OLpNgzT5KZAkKqfPmm3TroSJAm1tJRM
      Xx8Ik9A3tmL2Po0V+4hWJiEj5ddiTnS+bzZaVgA+o1iWhW6azKVTTMbjTJ7rNwD2xA+63QTd
      Hryag+lkgu/v303mXJea9SVlTCUTdE7aE7PA4+VLswnSP38KriALzbl6Ff57P8fM//srlIIC
      cr/+ZcyJdlK7/tJOqfxQm22BXHkjVmL6XL+yi5MNh/6MIoRAlWVyXW5yXW4WfUC/AYesIEvS
      vAB4NI2EfuGNqskyOTdvI97XT2z37o/0PEo4TO5XvoxaVIS2aBFClu3/StbgvO3PSB/+EcZo
      G1b00iqR8BejVNyEyCkhvf/7H3xudgXIciksy+Lk6DCH+s6S7/Vwx6IlxDJpXu88TUrXyXW5
      Sek6i11uSl96heTbjR/KM6yEwzgf/11migqZS6eQJQmfw0mRz48iSViWhRnpxpruQ+/eZQtC
      YhIrMWOrNrID4QqAaSCHlyP8RSiLbyfd+KNzrVrfn6wAZLksLMvCtCyEEEhCYFl2g6XOyXF+
      cuwwummiSBK/s2INoQOHmH3hRaxLFeIVgkhNNcdu2kivLJMxDaxz9xCAW9NoCBexrWqR3c3e
      NInt2U3yyFv4bt8CZDATKdSSMizdJLrjZYyEB98dd6GV5RL7yf2XrESRVYGyXBZCCOR3hFWc
      n6TTyeR8B0vdNBlPp+hdsYxBv5va1nbKes5ijI3ZE/vctZLbjbW0nv2lRTT7PZhYYFyIJD3/
      To6mUhzo6+XY0AD31C1lXW6Q6I7XyJw9C1qY5IkTmLEYOQ8/BLLM3N5OsCySrR2EvrLyAye/
      LdDZFSDLFTKTTPCTY4cZnYtS5POzOJTPzq4zWIAsJP7DDVtobmtltL+PEq+PzUuXo+fl8bPW
      ZnqmLr9+qCQE2ytruGF0gnRbG0JVmXv9DQC0xYtRwmHi+/bZJ8sSuTfrEH3/ze9I3xw/6E1n
      V4AsV0aO08Xvb7yBSDxOntvNzu7OeVuNYZm83tnBiakJ8LppEyZOy+BsV8eHmvxwrtbp2W6C
      SxtYu+Um0j09JJtbMKJR3BvW41hSR6q1FTMex7V6BcJ4/hI2I5n1eSK7AmS5uozNRXmq2W7E
      sSgUwjQtWscuWG4KfT5Go9GPHD0UdLt5fP0NBFwu9LExEk1NuFatInG8idiu3SilJeR95VFi
      /+uWDxxnpC/BZK6cXQGyXF0KvD6+ufEGoqkUeS43zSNDtI+PYVgmqiQRiSeuKHRuMh6naXiQ
      7dWLSBw9xtRPnyBWvYfM0DBWIkG6pwfvpurLG0xIWQHIcvVxKirOcznJq4pKUCWZwdlpvA4H
      L7e3XfH47eOj3FhRhZyXhxwKopaWYs5G0RMJhMuFkC6dmhkIabg0kRWALB8vkhA0FBbRUFhE
      8/AgxlXQuCOJONF0itz169AWLUL2+0id6WT6F79AKy9HaJeO8XS6ZZxkzaBZriGzyeRVGSet
      G6R0HeGSUIJ59rG+PtKdXaQ7ziBSlZc9sbPh0FmuC/ThYTjvj5i+/Ay1rABkuWb4nc6rMo6m
      KDiUhe9476234FiyBLmgAO/dn7/ssbIqUJZrRrE/B1lIGNaVVX3Ic7kwTZO3us4Qz6RZWlBI
      ZVERkt+HNdDP3FsHcHoCcBm1RbMCkOWakeN0UR4IfGgn2Lsp9ufwVPMxBmbt+kGN/X08mh8m
      t7kFK5UicawJ5y1FlyUAWRUoyzVDlSS2VFZfUaJj0O3GoSjzkx8gZeg0zkURYbsChhIuRK3d
      dlnjZQUgyzVDCEFtqIBVRSUf6XpFkri1phbPu6tfA7qqkP+t/4T39ttQwgXoiXwQ8qXH/EhP
      kiXLR0SVZe6tX8ZMMkn31ORlXycJwZriMrojkzgVFb/DyWzqgll1XUk5UiZDbM9erFSKVHsb
      gS01MNvxweN+5F+SJctHxKNqfHXNetaWlF1W5TpVltlcXklZIMCRwX5OjY9wT109Vbl5LMm3
      V5SW0SEO9fVinTOFIhSU+ocvOXY2GC7LJ4ZlWXRHJtl7tpueSISMYWBi5w1IQuBRNZaGCxmJ
      ztIzFWFrZQ1pw85AaxkZYjg6y0NLG3i98zSzKbuP2DclB77WNtSiIlzrV6If/D8xx0+97zNk
      VaAsnxhCCGqCIWqCIWLpNGOxOWKp8ymRDop8foSA51tPMhydJej2sKm8gpSu0zk5gVNRcSgK
      imTr+pIQuDZvwpHRmX7iSaIvvUzO3esQ0hkwLx4flF0BsnzqyRgGM8kEeW7PvMqUzGRI6BkC
      ThfdkUmODw/SMT5GaU6A2159C725GQDP9i24y3rRO1666NjZPUCWTz2qLBPyeBfsF5yqSq7L
      Pb+KbKuqIanrtI2NkNq4HjkvD6FpJE+0MdesYamFFx07uwJkuS4wLYvDA31kDIMbyisxIxEm
      /u7vSXfYViDfLUtRpd1Y0eEF12VXgCzXBZIQbCyr4KbKaiRJQs4/u3G7AAAAyUlEQVTNRSsr
      tb9UFJTqzagb/jeEe2H9o+wKkOW6xZiZJf7221iGQbKpGWNyAld9Dgr7sGbtKtHZFSDLdYuc
      48d3x+3IOX6Szc1kBgZJtEdRN30bEVgKiKwAZLn+UQoKkM73S5MEkSd2MNPoR5fWZlWgLNc/
      lmmS7u5BHx8n3d1N9IUXAdDqFmdXgCzXP0KScCyqwbN5E86G5YjziTlmdhOc5TOGZZpk+vsx
      o3PE9h/IhkJk+WwhJAmtogIAMxbLrgBZPrtYlsX/B+RXfNOM/I0BAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='5) Create Scatter Plot showing the relationship between average Profit and Sales by Product subcategories.' width='192'>
      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
      Q7y42QAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
